<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三角猫</title>
  
  
  <link href="https://690554125.github.io/atom.xml" rel="self"/>
  
  <link href="https://690554125.github.io/"/>
  <updated>2021-11-06T07:36:11.575Z</updated>
  <id>https://690554125.github.io/</id>
  
  <author>
    <name>czm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS原型和继承</title>
    <link href="https://690554125.github.io/2020/12/30/2020/%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF%E5%88%9D%E8%AF%86/"/>
    <id>https://690554125.github.io/2020/12/30/2020/%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF%E5%88%9D%E8%AF%86/</id>
    <published>2020-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:36:11.575Z</updated>
    
    <content type="html"><![CDATA[<p>初步介绍下原型和继承，以及相关的 API.</p><h2 id="原型是什么"><a href="#原型是什么" class="headerlink" title="原型是什么"></a>原型是什么</h2><p>所有的对象（包括函数）都有一个隐藏的内部属性<code>[[Prototype]]</code>，该属性引用的就是<strong>原型</strong>，原型本身也是一个对象，所以原型自己也有原型。</p><h2 id="原型长什么样"><a href="#原型长什么样" class="headerlink" title="原型长什么样"></a>原型长什么样</h2><p>因为<code>[[Prototype]]</code>是内部属性，所以通过代码无法访问，但是我们有其他方式访问到原型。</p><h3 id="构造函数才有的-prototype"><a href="#构造函数才有的-prototype" class="headerlink" title="构造函数才有的 prototype"></a>构造函数才有的 prototype</h3><p>这是 JS 早期就有的属性，<strong>只有函数才有，字面量对象是没有的</strong>，可以在控制台尝试访问一个字面量对象的<code>prototype</code>，发现是<code>undefined</code>。所以这个功能有限。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);</span><br></pre></td></tr></table></figure><p>结果如图：<br><img src="/images/Jietu20200525-160258.jpg" alt="prototype"></p><h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h3><p>2012 年，<code>Object.create()</code>被写入标准，提供了使用给定原型创建对象的能力，然后还是没有提供<code>set/get</code>原型的能力，浏览器厂商们因此实现了非标准的<code>__proto__</code>访问器属性，允许用户随时修改和获取原型对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b.__proto__);</span><br></pre></td></tr></table></figure><p>结果如图：<br><img src="/images/Jietu20200525-170153.jpg" alt="prototype"></p><h3 id="标准方法-Object-getPrototypeOf-和-Object-setPrototypeOf"><a href="#标准方法-Object-getPrototypeOf-和-Object-setPrototypeOf" class="headerlink" title="标准方法 Object.getPrototypeOf 和 Object.setPrototypeOf"></a>标准方法 Object.getPrototypeOf 和 Object.setPrototypeOf</h3><p>2015 年，这 2 个方法被加入到标准中。但是因为<code>__proto__</code>在很多浏览器都得到了实现，即便过时，但也被加入到标准的附件中了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(a);</span><br></pre></td></tr></table></figure><p>结果如图<br><img src="/images/Jietu20200525-170710.jpg" alt="prototype"></p><p>总结：从上面的几个代码案例看出来，我们所打印的<strong>原型就是对象</strong>。</p><h2 id="原型的作用"><a href="#原型的作用" class="headerlink" title="原型的作用"></a>原型的作用</h2><p>当我们想要访问一个对象的属性时，先从对象自身查找，如果没有，会去对象的私有属性<code>[[Prototype]]</code> 所引用的原型对象上去找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">  <span class="attr">run</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(son, parent); <span class="comment">// 等于 son.__proto__ = parent</span></span><br><span class="line"></span><br><span class="line">son.run; <span class="comment">// true son对象本身没有run属性，所以会沿着[[Prototype]]指向的原型对象上去找</span></span><br></pre></td></tr></table></figure><p>这个特性可以让我们复用逻辑，实现面向对象语言中的 <strong>继承</strong> 特性。</p><h2 id="JS-中的继承"><a href="#JS-中的继承" class="headerlink" title="JS 中的继承"></a>JS 中的继承</h2><p>JS 中的继承是通过<code>[[Prototype]]</code>来实现的，即便在 ES6 时代有了<code>class</code>关键字。</p><p>早期的函数方式继承：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">son.run; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用 es6 关键字<code>class</code>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.run = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">son.run;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原型是一个对象的内部属性<code>[[Prototype]]</code>所引用的一个对象。从 JS 诞生开始，就有<code>F.prototype</code>的方式可以访问到原型，和修改原型，但是只有函数才有<code>prototype</code>，后来浏览器厂商自己实现了<code>__proto__</code>访问器属性来实现对原型的<code>set/get</code>，直到 ES 标准规定了原型的访问和设置的方法<code>Object.getPrototypeOf</code>和<code>Object.setPrototypeOf</code>。</p><p>原型存在的最大作用是<strong>继承</strong>，JS 中的继承都是<strong>原型继承</strong>，从以前的<code>函数继承</code>到现在的<code>class</code>类语法糖来实现继承。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;初步介绍下原型和继承，以及相关的 API.&lt;/p&gt;
&lt;h2 id=&quot;原型是什么&quot;&gt;&lt;a href=&quot;#原型是什么&quot; class=&quot;headerlink&quot; title=&quot;原型是什么&quot;&gt;&lt;/a&gt;原型是什么&lt;/h2&gt;&lt;p&gt;所有的对象（包括函数）都有一个隐藏的内部属性&lt;code&gt;[</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>导航流程</title>
    <link href="https://690554125.github.io/2020/12/30/2020/URL%E8%BE%93%E5%85%A5%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B/"/>
    <id>https://690554125.github.io/2020/12/30/2020/URL%E8%BE%93%E5%85%A5%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B/</id>
    <published>2020-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:36:21.906Z</updated>
    
    <content type="html"><![CDATA[<p>这里先配流程图，后面描述在丰富一下。</p><h2 id="导航阶段"><a href="#导航阶段" class="headerlink" title="导航阶段"></a>导航阶段</h2><p><img src="/images/browser_navigator.png" alt="导航阶段"></p><h2 id="渲染阶段"><a href="#渲染阶段" class="headerlink" title="渲染阶段"></a>渲染阶段</h2><p><img src="/images/browser_render.png" alt="渲染阶段"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里先配流程图，后面描述在丰富一下。&lt;/p&gt;
&lt;h2 id=&quot;导航阶段&quot;&gt;&lt;a href=&quot;#导航阶段&quot; class=&quot;headerlink&quot; title=&quot;导航阶段&quot;&gt;&lt;/a&gt;导航阶段&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/browser_navigator.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>实现Promise（版本2自己实现）</title>
    <link href="https://690554125.github.io/2020/12/30/2020/%E5%AE%9E%E7%8E%B0promise_v2/"/>
    <id>https://690554125.github.io/2020/12/30/2020/%E5%AE%9E%E7%8E%B0promise_v2/</id>
    <published>2020-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:35:35.757Z</updated>
    
    <content type="html"><![CDATA[<p>上一次实现的<code>Promise</code>思路比较绕，不容易理解。参考市面上大部分的实现方式，自己实现了一把。</p><h2 id="原生"><a href="#原生" class="headerlink" title="原生"></a>原生</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收一个函数，函数接受2个回调函数，resolve 和 reject</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// promise初始状态为pending</span></span><br><span class="line">  <span class="comment">// 两种结果只能选其一，修改状态，并传递值或错误</span></span><br><span class="line">  <span class="comment">// resolve(value) 状态 -&gt; resolved</span></span><br><span class="line">  <span class="comment">// or</span></span><br><span class="line">  <span class="comment">// reject(error) 状态 -&gt; rejected</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步或同步注册then函数，函数接受2个回调，一个是resolved的value，一个是rejected的err</span></span><br><span class="line">p.then(onResolved, onRejected);</span><br><span class="line"></span><br><span class="line"><span class="comment">// then可以多次调用，也就是多次注册2个回调，一旦promise决议，状态不在改变</span></span><br><span class="line">p.then();</span><br></pre></td></tr></table></figure><h2 id="先搭架子"><a href="#先搭架子" class="headerlink" title="先搭架子"></a>先搭架子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量定义状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise构造函数，接收一个函数fn，fn接收resolve 和 reject</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始状态</span></span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">  <span class="comment">// 终值</span></span><br><span class="line">  <span class="keyword">var</span> finalValue = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 收集then中注册的第一个函数，fullfilled</span></span><br><span class="line">  <span class="keyword">var</span> onFulfilledCallback = [];</span><br><span class="line">  <span class="comment">// 收集then中注册的第二个函数，rejected</span></span><br><span class="line">  <span class="keyword">var</span> onRejectedCallback = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部实现的resolve</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部实现的reject</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现then方法</span></span><br><span class="line">  <span class="comment">// 因为调用方式是 obj.then，属于实例属性</span></span><br><span class="line">  <span class="comment">// 接收2个参数onFulfilled, onRejected</span></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  fn(resolve, reject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="填充基本的-promise-功能"><a href="#填充基本的-promise-功能" class="headerlink" title="填充基本的 promise 功能"></a>填充基本的 promise 功能</h2><p>实现<code>resolve</code>,<code>reject</code>,<code>then</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量定义状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise构造函数，接收一个函数fn，fn接收resolve 和 reject</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始状态</span></span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">  <span class="comment">// 终值</span></span><br><span class="line">  <span class="keyword">var</span> finalValue = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 收集then中注册的第一个函数，fullfilled</span></span><br><span class="line">  <span class="keyword">var</span> onFulfilledCallback = [];</span><br><span class="line">  <span class="comment">// 收集then中注册的第二个函数，rejected</span></span><br><span class="line">  <span class="keyword">var</span> onRejectedCallback = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部实现的resolve</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 只有状态为pending时，可以触发</span></span><br><span class="line">    <span class="keyword">if</span> (state === PENDING) &#123;</span><br><span class="line">      <span class="comment">// 修改状态为 resolved</span></span><br><span class="line">      state = RESOLVED;</span><br><span class="line">      <span class="comment">// 修改该promise终值为调用时传递的值</span></span><br><span class="line">      finalValue = value;</span><br><span class="line">      <span class="comment">// 将收集到的then注册的方法，全部执行一遍</span></span><br><span class="line">      onFulfilledCallback.forEach(<span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">        cb(value);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部实现的reject</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 只有状态为pending时，可以触发</span></span><br><span class="line">    <span class="keyword">if</span> (state === PENDING) &#123;</span><br><span class="line">      <span class="comment">// 修改状态为 rejected</span></span><br><span class="line">      state = RESOLVED;</span><br><span class="line">      <span class="comment">// 修改该promise终值为调用时传递的值</span></span><br><span class="line">      finalValue = err;</span><br><span class="line">      <span class="comment">// 将收集到的then注册的方法，全部执行一遍</span></span><br><span class="line">      onRejectedCallback.forEach(<span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">        cb(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现then方法</span></span><br><span class="line">  <span class="comment">// 因为调用方式是 obj.then，属于实例属性</span></span><br><span class="line">  <span class="comment">// 接收2个参数onFulfilled, onRejected</span></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 调用then的时候，如果该promise已经决议了，则执行其注册的回调</span></span><br><span class="line">    <span class="keyword">if</span> (state === RESOLVED) &#123;</span><br><span class="line">      onResolved(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (state === REJECTED) &#123;</span><br><span class="line">      onRejected(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 继续注册then的参数到各自回调中</span></span><br><span class="line">    <span class="keyword">if</span> (state === PENDING) &#123;</span><br><span class="line">      onFulfilledCallback.push(onFulfilled);</span><br><span class="line">      onRejectedCallback.push(onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行new promise(fn)中的fn，有可能出错，所以try catch包裹</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 出错就就决议这个promise为reject，调用其reject方法</span></span><br><span class="line">    reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完善-then"><a href="#完善-then" class="headerlink" title="完善 then"></a>完善 then</h2><ol><li><code>then</code>方法返回一个新的<code>promise2</code>，而<code>promise2</code>的终值，取决于上一个<code>promise</code>的<code>then</code>的返回值，我们来改造<code>then</code></li><li><code>then</code>方法接收 2 个回调函数，非必传，未传时需要有默认的，因为空<code>then</code>可以透传结果。如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="number">1</span>));</span><br><span class="line">p.then()</span><br><span class="line">  .then()</span><br><span class="line">  .then(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">console</span>.log(r)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断then注册的是否是函数，否则要提供默认函数，透传结果</span></span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function">(<span class="params">v</span>) =&gt;</span> v;</span><br><span class="line">  onRejected =</span><br><span class="line">    <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">      ? onRejected</span><br><span class="line">      : <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> promise2 = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (state === RESOLVED) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 因为执行onResolved的函数可能会出错，所以try包裹</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 拿到前一个promise的then中第一个参数（onResolved）执行后的结果，这里用x表示。</span></span><br><span class="line">        <span class="keyword">const</span> x = onResolved(value);</span><br><span class="line">        <span class="comment">// 如果x是一个x-promise，则我们需要用这个x-promise的终值作为promise2的终值</span></span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">          <span class="comment">// 这里传递给x.then的 onFulfilled函数，是 promise2的 resolve，如果x-promise决议了，就会去调用promise2的resolve，从而决定了promise2的终值。</span></span><br><span class="line">          x.then(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果x不是我们的MyPromise实例，则直接调用promise2的resolve，决议即可。</span></span><br><span class="line">          resolve(x);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 返回promise2</span></span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state === REJECTED) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 这里解析的道理与上面一样。</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> x = onRejected(value);</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">          x.then(resolve, reject);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 继续注册then的参数到各自回调中</span></span><br><span class="line">  <span class="keyword">if</span> (state === PENDING) &#123;</span><br><span class="line">    <span class="comment">// promise1还未决议，不清楚是执行resolve还是reject，所以，将回调函数插入对应数组</span></span><br><span class="line">    promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 将promise1的then方法注册的函数插入</span></span><br><span class="line">      <span class="comment">// then的第一个参数：(res) =&gt; &#123;&#125;</span></span><br><span class="line">      onFulfilledCallback.push(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onResolved(value);</span><br><span class="line">          <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">            x.then(resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果x不是我们的MyPromise实例，则直接调用promise2的resolve，决议即可。</span></span><br><span class="line">            resolve(x);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// then的第二个参数 (err) =&gt; &#123;&#125;</span></span><br><span class="line">      onRejectedCallback.push(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onRejected(reason);</span><br><span class="line">          <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">            x.then(resolve, reject);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-catch"><a href="#实现-catch" class="headerlink" title="实现 catch"></a>实现 catch</h2><p>实现了<code>then</code>后，再实现<code>catch</code>会很简单，<code>catch</code>实际上就是<code>then(null, onRejected)</code>，第一个参数不处理。</p><p>看看原生的实现方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;this is error&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err); <span class="comment">// 打印Error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收一个处理错误的方法，方法接收一个reason</span></span><br><span class="line"><span class="built_in">this</span>.catch = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.then(<span class="literal">null</span>, fn);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-Promise-all"><a href="#实现-Promise-all" class="headerlink" title="实现 Promise.all"></a>实现 Promise.all</h2><p>看看原生的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// [1,2]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有rejected掉的，则整个promise rejected掉</span></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;this is error&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3])</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// Error: this is error</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>从原生的实现我们得知，<code>Promise.all</code>做的事有这些：</p><ul><li>返回一个 <code>promise</code></li><li>接收一个数组，数组成员都是<code>promise</code></li><li>如果全部成员<code>resolved</code>，则返回一个数组，数组中每一项是每个成员的<code>resolved</code>的终值</li><li>如果有一个成员<code>rejected</code>，则整个<code>promise</code>被<code>rejected</code>掉。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">MyPromise.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回一个promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 存放每个成员的终值</span></span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="comment">// 循环执行每个成员</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      promises[i].then(</span><br><span class="line">        <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 如果成功resolved了，就往终值数组里塞入终值</span></span><br><span class="line">          res.push(r);</span><br><span class="line">          <span class="comment">// 当终值数组长度和传入的promise长度相等，则可以resolved整个大promise，终值就是终值数组</span></span><br><span class="line">          <span class="keyword">if</span> (res.length === promises.length) &#123;</span><br><span class="line">            resolve(res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 原本尝试用catch来捕获错误，不行</span></span><br><span class="line">      <span class="comment">// 原因：catch通过then模拟的，比then中的第二个参数执行，慢。因为setTimeout插入macro的时机关系。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原本将resolve放到这里执行，不行。</span></span><br><span class="line">    <span class="comment">// 原因：因为所有异步通过setTimeout来实现，for循环结束了，立马就执行resolve了，在reject之前执行，导致整个promise是resolved的状态</span></span><br><span class="line">    <span class="comment">// resolve(res)</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该版本的 promise 整体较为容易理解，真正的模拟实现，还应该根据<code>PromiseA+</code>规范约定的，处理各个<code>promise</code>实现的兼容，这里就不做分析了，网上有很多。</p><p>至于<code>race</code>等方法，其实跟<code>all</code>差不多了，只要有一个<code>resolved</code>或<code>rejected</code>了，整体就决议了，感兴趣的读者，自己尝试下。</p><p>上一下<code>codesandbox</code>的测试链接，<a href="https://codesandbox.io/s/shousipromise-02109">手撕 promise</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一次实现的&lt;code&gt;Promise&lt;/code&gt;思路比较绕，不容易理解。参考市面上大部分的实现方式，自己实现了一把。&lt;/p&gt;
&lt;h2 id=&quot;原生&quot;&gt;&lt;a href=&quot;#原生&quot; class=&quot;headerlink&quot; title=&quot;原生&quot;&gt;&lt;/a&gt;原生&lt;/h2&gt;&lt;figu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>实现Promise（版本1）</title>
    <link href="https://690554125.github.io/2020/12/30/2020/%E5%AE%9E%E7%8E%B0promise_v1/"/>
    <id>https://690554125.github.io/2020/12/30/2020/%E5%AE%9E%E7%8E%B0promise_v1/</id>
    <published>2020-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:35:17.136Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个<code>Promise</code>。</p><p>原生的语法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看起来很简单，就是函数有个<code>then</code>方法呗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">miniPromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">then</span>: <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line">      callback(value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">miniPromise().then(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实现了一个完全只是语法糖的<code>promise</code> 😁，并没有什么用。</p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><ol><li>promise 接收一个函数 fn，创建 promise 时，fn 自动执行，且 fn 接收<code>resolve</code>。</li><li>函数有个<code>then</code>方法，接收一个回调函数，回调函数接收终值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> callback = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    callback = cb;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    callback(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码执行会报错，<code>callback</code>不是一个函数。分析看出<code>MyPromise</code>执行时调用了<code>resolve</code>方法，里面通过<code>callback</code>得到值，但是此时<code>then</code>还未调用呢，<code>callback</code>是 <code>null</code></p><p>所以 我们需要等到<code>then</code>注册完<code>callback</code>后在调用，可以将<code>callback</code>异步执行（下一个事件循环），保证同步注册的<code>then</code>函数先触发去注册<code>callback</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> callback = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    callback = cb;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      callback(value);</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看起来可以正常跑，只是当<code>then</code>异步调用时，发现又不管用了。</p><h2 id="加入状态机制"><a href="#加入状态机制" class="headerlink" title="加入状态机制"></a>加入状态机制</h2><p>我们来引入<code>promise</code>的状态机来解决异步注册的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">&#x27;pedding&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> deferred = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// resolve的工作是将状态切换为resolved</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newV</span>) </span>&#123;</span><br><span class="line">    state = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">    value = newV;</span><br><span class="line">    <span class="comment">// 如果resolve时，已经有注册过函数，则执行</span></span><br><span class="line">    <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">      deferred(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then 注册一个onResolved方法，接收终值</span></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="string">&#x27;pedding&#x27;</span>) &#123;</span><br><span class="line">      deferred = onResolved;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      onResolved(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的<code>deferred</code>和<code>onResolved</code>其实是同一个东西，只不过如果<code>state</code>还是<code>pedding</code>状态，则<code>onResolved</code>需要延迟到<code>resolve</code>调用后执行。所以我们可以统一调度调用<code>deferred</code>（或者说是<code>onResolved</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">&#x27;pedding&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> deferred = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// resolve的工作是将状态切换为resolved</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newV</span>) </span>&#123;</span><br><span class="line">    state = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">    value = newV;</span><br><span class="line">    <span class="comment">// 如果resolve时，已经有注册过函数，则执行</span></span><br><span class="line">    <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">      deferred(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 统一调度调用onResolved</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">onResolved</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="string">&#x27;pedding&#x27;</span>) &#123;</span><br><span class="line">      deferred = onResolved;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    onResolved(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then 注册一个onResolved方法，接收终值</span></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved</span>) </span>&#123;</span><br><span class="line">    handle(onResolved);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码已经实现了<code>promise</code>的基本功能。即便是异步<code>resolve</code>也可以获取到终值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="then-返回新的-promise"><a href="#then-返回新的-promise" class="headerlink" title="then 返回新的 promise"></a>then 返回新的 promise</h2><ul><li><code>then</code>方法返回一个<code>promise</code>，并接受前一个上一个的<code>then</code>返回值作为入参。</li><li>如果上一个<code>then</code>没有注册<code>resolved</code>方法，则透传之前的终值。</li><li>如果上一个<code>then</code>有注册<code>resolved</code>方法，执行，并将执行结果传递给下一个<code>then</code></li></ul><p>我们先看下原生的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// then 返回新的promise。因为可以链式调用then。</span></span><br><span class="line"><span class="comment">// 链式的then并非之前的promise，而是新的promise</span></span><br><span class="line">p.then()</span><br><span class="line">  .then()</span><br><span class="line">  .then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v); <span class="comment">// 前2个then没有获取到终值，透传终值1</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> v + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：上面 2 个调用有个很有意思的地方，透传的有 3 个 then，非直接透传的有 2 个 then，打印结果，先 2，后 1。因为透传的多了一层 then</p></blockquote><p>现在我们来改造<code>MyPromise</code></p><ol><li><code>then</code>可能注册了<code>onResolved</code>，也可能没有，没有则需要透传终值，要改状态</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">&#x27;pedding&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> deferred = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// resolve的工作是将状态切换为resolved</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newV</span>) </span>&#123;</span><br><span class="line">    state = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">    value = newV;</span><br><span class="line">    <span class="comment">// 改造4：deferred在改造3中已经是个对象了，这个对象就交给handle来处理就行了</span></span><br><span class="line">    <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">      handle(deferred);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 统一调度调用onResolved</span></span><br><span class="line">  <span class="comment">// 改造3：接收的是个对象了，所以要改</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="string">&#x27;pedding&#x27;</span>) &#123;</span><br><span class="line">      deferred = handler;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> handledValue = value;</span><br><span class="line">    <span class="comment">// 如果有上个then注册的onResolved方法，则调用，获取到处理后的终值</span></span><br><span class="line">    <span class="keyword">if</span> (handler.onResolved) &#123;</span><br><span class="line">      handledValue = handler.onResolved(handledValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将处理过或默认的终值传递给能够确定终值和状态的resolve</span></span><br><span class="line">    handler.resolve(handledValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then 注册一个onResolved方法，接收终值</span></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 改造1： 返回一个promise，promise接收resolve函数，用于改变这个返回的新promise的状态，并更改其终值。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 改造2：如果onResolved（前一个promise.then注册的处理终值的方法）存在，需要调用，获取到处理后的终值给到这个新的promise。如果onResolved没有，需要透传，透传则调用resolve这个方法（就是function resolve）方法啦！</span></span><br><span class="line">      <span class="comment">// 因为我们有个handle方法统一调度onResolved或deferred。我们还是交给它来调度。要改造下handle了。</span></span><br><span class="line">      handle(&#123;</span><br><span class="line">        onResolved,</span><br><span class="line">        resolve,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来调用试试。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then()</span><br><span class="line">  .then()</span><br><span class="line">  .then()</span><br><span class="line">  .then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v); <span class="comment">// 1</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p2.then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> v + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>打印顺序是 1，2，并非原生的 2，1。因为我们模拟的函数里并没有让 then 异步处理，而是同步的。</p></blockquote><h2 id="如果-then-返回的是-promise"><a href="#如果-then-返回的是-promise" class="headerlink" title="如果 then 返回的是 promise"></a>如果 then 返回的是 promise</h2><p>上面的链式调用，只处理了普通的终值，如果终值本身就是<code>promise</code>的话，我们就需要在<code>then</code>中对终值在进行<code>then</code>的写法，嵌套会越来越深。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function"><span class="params">promise1</span> =&gt;</span> &#123;</span><br><span class="line">  promise1.then(<span class="function"><span class="params">promise2</span> =&gt;</span> &#123;</span><br><span class="line">    promise2.then(<span class="function"><span class="params">promise3</span> =&gt;</span> &#123;</span><br><span class="line">      promise3.then(...)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>看看原生是怎么处理的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = [];</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  time.push(<span class="built_in">Date</span>.now());</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">  <span class="function">() =&gt;</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">).then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  time.push(<span class="built_in">Date</span>.now());</span><br><span class="line">  <span class="built_in">console</span>.log(v, time[<span class="number">1</span>] - time[<span class="number">0</span>]); <span class="comment">// 2 3000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>原生的 <code>promise.then</code>返回的如果是新的<code>promise</code>，则后续的链都是以这个新的<code>promise</code>的<code>resolved</code>后的终值来传递了，跟最开始的旧<code>promise</code>无关了。<br>所以我们要对<code>then</code>返回的是<code>promise</code>做个判断处理，如果<code>then</code>返回的是一个<code>promise</code>，等待其<code>resolved</code>后，传递它的终值。</p><p>因为无论有没有上一个<code>promise</code>注册的<code>onResolved</code>方法，最终都会走<code>resolve</code>来确定新<code>promise</code>的状态和终值，我们就在<code>resolve</code>做判断处理就好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">&#x27;pedding&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> deferred = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// resolve的工作是将状态切换为resolved</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newV</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 改造5：如果接收到的终值是一个promise，则调用其then方法，终止旧的promise，开启基于返回的新的promise进行传递</span></span><br><span class="line">    <span class="keyword">if</span> (newV &amp;&amp; <span class="keyword">typeof</span> newV.then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      newV.then(resolve);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    state = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">    value = newV;</span><br><span class="line">    <span class="comment">// 改造4：deferred在改造3中已经是个对象了，这个对象就交给handle来处理就行了</span></span><br><span class="line">    <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">      handle(deferred);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 统一调度调用onResolved</span></span><br><span class="line">  <span class="comment">// 改造3：接收的是个对象了，所以要改</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="string">&#x27;pedding&#x27;</span>) &#123;</span><br><span class="line">      deferred = handler;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> handledValue = value;</span><br><span class="line">    <span class="comment">// 如果有上个then注册的onResolved方法，则调用，获取到处理后的终值</span></span><br><span class="line">    <span class="keyword">if</span> (handler.onResolved) &#123;</span><br><span class="line">      handledValue = handler.onResolved(handledValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将处理过或默认的终值传递给能够确定终值和状态的resolve</span></span><br><span class="line">    handler.resolve(handledValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then 注册一个onResolved方法，接收终值</span></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 改造1： 返回一个promise，promise接收resolve函数，用于改变这个返回的新promise的状态，并更改其终值。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 改造2：如果onResolved（前一个promise.then注册的处理终值的方法）存在，需要调用，获取到处理后的终值给到这个新的promise。如果onResolved没有，需要透传，透传则调用resolve这个方法（就是function resolve）方法啦！</span></span><br><span class="line">      <span class="comment">// 因为我们有个handle方法统一调度onResolved或deferred。我们还是交给它来调度。要改造下handle了。</span></span><br><span class="line">      handle(&#123;</span><br><span class="line">        onResolved,</span><br><span class="line">        resolve,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试看看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = [];</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  time.push(<span class="built_in">Date</span>.now());</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">  <span class="function">() =&gt;</span></span><br><span class="line">    <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">).then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  time.push(<span class="built_in">Date</span>.now());</span><br><span class="line">  <span class="built_in">console</span>.log(v, time[<span class="number">1</span>] - time[<span class="number">0</span>]); <span class="comment">// 2 3009</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><p><code>promise</code>的异常处理<code>rejected</code>，我们来加上。</p><p>先看原生的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;is a error&#x27;</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">  <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 捕获异常打印</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们看到，初始化时加入了<code>reject</code>函数，接收一个<code>Error</code>类型的值。在<code>then</code>中第二个参数，来接收该错误，处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">&#x27;pedding&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> deferred = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newV</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newV &amp;&amp; <span class="keyword">typeof</span> newV.then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      newV.then(resolve);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    state = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">    value = newV;</span><br><span class="line">    <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">      handle(deferred);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改造1：增加reject函数，将状态变为 rejected。</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">    value = err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">      handle(deferred);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="string">&#x27;pedding&#x27;</span>) &#123;</span><br><span class="line">      deferred = handler;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> handledValue = value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改造6：handler比之前多了onRejected和reject，根据state状态调用对应的then处理函数</span></span><br><span class="line">    <span class="keyword">var</span> handleCallback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (state === <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">      handleCallback = handler.onResolved;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      handleCallback = handler.onRejected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handleCallback) &#123;</span><br><span class="line">      handledValue = handleCallback(handledValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handler.resolve(handledValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改造4：then方法接收第二个参数处理error</span></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      handle(&#123;</span><br><span class="line">        onResolved,</span><br><span class="line">        resolve,</span><br><span class="line">        <span class="comment">// 改造5：将上一个处理异常的onRejected和当前reject交给handle来统一调度</span></span><br><span class="line">        onRejected,</span><br><span class="line">        reject,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//改造3：接收第二个参数reject</span></span><br><span class="line">  fn(resolve, reject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;hello&#x27;</span>));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">  <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;succ&#x27;</span>, v);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fail&#x27;</span>, err); <span class="comment">// fail Error: hello</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="promise-catch"><a href="#promise-catch" class="headerlink" title="promise.catch"></a>promise.catch</h2><p>平时捕获异常用的最多的应该还是<code>promise.catch</code>。</p><p>我们来看下原生的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 已知错误</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then().catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err); <span class="comment">// 123</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未知错误，通常在resolve执行中，或then的onResolved出错，我们也应该捕获。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(a);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>尝试实现下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">&#x27;pedding&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="comment">// 改造5：标志符，用来控制实例化promise时有无注册catch来控制抛错还是用catch(实际上就是then中的onResovled)处理</span></span><br><span class="line">  <span class="keyword">var</span> catcher = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> deferred = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newV</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 改造1：捕获resolve可能出现的问题</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newV &amp;&amp; <span class="keyword">typeof</span> newV.then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        newV.then(resolve);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      state = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">      value = newV;</span><br><span class="line">      <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">        handle(deferred);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">    value = err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">      handle(deferred);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!catcher) &#123;</span><br><span class="line">          <span class="keyword">throw</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="string">&#x27;pedding&#x27;</span>) &#123;</span><br><span class="line">      deferred = handler;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改造3：因为promise是异步的，所有操作需要异步处理</span></span><br><span class="line">    <span class="keyword">var</span> handledValue = value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> handleCallback;</span><br><span class="line">    <span class="comment">// 改造2：捕获handle传入的处理函数时可能出现的问题</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (state === <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">        handleCallback = handler.onResolved;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        handleCallback = handler.onRejected;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (handleCallback) &#123;</span><br><span class="line">        handledValue = handleCallback(handledValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      handler.reject(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handler.resolve(handledValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      handle(&#123;</span><br><span class="line">        onResolved,</span><br><span class="line">        resolve,</span><br><span class="line">        onRejected,</span><br><span class="line">        reject,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// catch方法也会返回一个promise，实际上就等于then方法第一个参数不传，第二个参数处理err</span></span><br><span class="line">  <span class="built_in">this</span>.catch = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果注册了catch，则异常交给catch来做</span></span><br><span class="line">    catcher = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 注册catch</span></span><br><span class="line">    <span class="built_in">this</span>.then(<span class="literal">null</span>, fn);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改造4：初始化promise时也可能出错，若出错，直接调用reject</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="promise-需要异步"><a href="#promise-需要异步" class="headerlink" title="promise 需要异步"></a>promise 需要异步</h2><p>PromiseA+规范要求解决程序，也就是 resolve 和 reject 的执行都是异步的。</p><p>所以我们需要对<code>handle</code>函数做异步调用，我们使用<code>setTimeout</code>模拟。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="string">&#x27;pedding&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> catcher = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> deferred = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newV</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newV &amp;&amp; <span class="keyword">typeof</span> newV.then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        newV.then(resolve);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      state = <span class="string">&#x27;resolved&#x27;</span>;</span><br><span class="line">      value = newV;</span><br><span class="line">      <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">        handle(deferred);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">    value = err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">      handle(deferred);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!catcher) &#123;</span><br><span class="line">          <span class="keyword">throw</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="string">&#x27;pedding&#x27;</span>) &#123;</span><br><span class="line">      deferred = handler;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改造：因为promise是异步的，所有操作需要异步处理</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> handledValue = value;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> handleCallback;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">          handleCallback = handler.onResolved;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">          handleCallback = handler.onRejected;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handleCallback) &#123;</span><br><span class="line">          handledValue = handleCallback(handledValue);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        handler.reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      handler.resolve(handledValue);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      handle(&#123;</span><br><span class="line">        onResolved,</span><br><span class="line">        resolve,</span><br><span class="line">        onRejected,</span><br><span class="line">        reject,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.catch = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    catcher = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.then(<span class="literal">null</span>, fn);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise-all-方法"><a href="#Promise-all-方法" class="headerlink" title="Promise.all 方法"></a>Promise.all 方法</h2><ul><li>接收一个数组，数组成员都是<code>promise</code>。</li><li>数组中所有的<code>promise</code>都<code>resolved</code>，整体才能<code>resolve</code>，否则<code>reject</code>掉第一个出错的数组成员<code>promise</code>。</li><li>该函数返回一个新的<code>promise</code>，终值是所有数组成员的终值构成的数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MyPromise.all = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> resArr = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      arr[i]</span><br><span class="line">        .then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          resArr.push(r);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(resArr);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个版本的实现虽然可以达到<code>promise</code>基本的功能，但是思路有点绕。</p><p>而且有个<code>bug</code>，未实现<code>catch</code>和<code>onRejected</code>函数的话，不会抛错，内部逻辑里<code>handle</code>函数判断已经<code>reject</code>了，不在会设置<code>deferred</code>，导致静默报错了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实现一个&lt;code&gt;Promise&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;原生的语法如下&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>探究JS原型</title>
    <link href="https://690554125.github.io/2020/12/30/2020/%E6%8E%A2%E7%A9%B6%E5%8E%9F%E5%9E%8B/"/>
    <id>https://690554125.github.io/2020/12/30/2020/%E6%8E%A2%E7%A9%B6%E5%8E%9F%E5%9E%8B/</id>
    <published>2020-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:35:54.647Z</updated>
    
    <content type="html"><![CDATA[<p>详细分析原型对象的构成和作用，理清<code>prototype</code>，<code>__proto__</code>相关的关系。</p><h1 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h1><p>原型是 JS 诞生就有的， 但是原型的访问方式，在“远古”时代，唯一可靠的方法就是通过构造函数的<code>prototype</code>属性来获取和设置原型对象。</p><h2 id="不是原型，只是普通属性"><a href="#不是原型，只是普通属性" class="headerlink" title="不是原型，只是普通属性"></a>不是原型，只是普通属性</h2><p>函数创建时，默认会有一个名为<code>prototype</code>的<strong>常规普通属性</strong>，这个属性只有在 函数当做构造函数，且通过<code>new</code>创建实例对象时才有用。</p><p><code>new F()</code>调用时，如果有<code>F.prototype</code>，则会将<code>F.prototype</code>作为实例对象的<code>[[Prototype]]</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line">person.__proto__ === Parent.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但如果之后修改了<code>F.prototype = other Object</code>，则后续<code>new F()</code>所创建的实例对象则会使用新的对象来作为<code>[[Prototype]]</code>，原本已生成的实例对象的原型还会保留旧值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Parent();</span><br><span class="line">Parent.prototype = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Parent();</span><br><span class="line">person1.__proto__ === person2.__proto__; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>至于为什么说<code>prototype</code>不是原型，而只是普通属性，那是因为不作为<code>new F()</code>使用的话，它真的与普通属性无差异，没有任何魔法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">  <span class="attr">prototype</span>: <span class="string">&#x27;普通属性&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">parent.prototype; <span class="comment">// 普通属性</span></span><br></pre></td></tr></table></figure><h2 id="F-prototype-的构成"><a href="#F-prototype-的构成" class="headerlink" title="F.prototype 的构成"></a>F.prototype 的构成</h2><p>所有函数创建时具有一个默认的<code>prototype</code>属性，该属性指向的对象里只有一个构造器属性<code>constructor</code>。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>该属性指向构造函数本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Parent.prototype.constructor === Parent; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果不去改变<code>prototype</code>，通过构造函数生成的实例对象，也可以使用<code>constructor</code>，我们就可以知道该实例属于哪个类（由哪个构造器生成）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Parent();</span><br><span class="line">person.constructor === Parent; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但<code>constructor</code>本身并不可靠，因为<code>prototype</code>可以随意更改，导致无法判断实例对象到底是由谁实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Parent.prototype = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Parent();</span><br><span class="line">person.constructor === Parent(); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="自定义属性、方法"><a href="#自定义属性、方法" class="headerlink" title="自定义属性、方法"></a>自定义属性、方法</h3><p>如上所说，默认的<code>prototype</code>属性所指的对象，只有一个<code>constructor</code>。因此我们会对<code>prototpye</code>进行扩展，当通过<code>new F()</code>创建实例时，实例将会获得（原型继承）我们扩展的方法，属性等等，这是<code>prototype</code>最重要的作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Parent.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;run&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Parent();</span><br><span class="line">parent.run(); <span class="comment">// run</span></span><br></pre></td></tr></table></figure><h1 id="proto-、setPrototypeOf、getPrototypeOf"><a href="#proto-、setPrototypeOf、getPrototypeOf" class="headerlink" title="__proto__ 、setPrototypeOf、getPrototypeOf"></a>__proto__ 、setPrototypeOf、getPrototypeOf</h1><p>前一篇文章介绍过，<code>__proto__</code>是浏览器自己实现的访问和修改原型的<strong>访问器属性</strong>，而<code>setPrototypeOf</code>和<code>getPrototypeOf</code>是标准中制定的方法，他们的效果一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a.__proto__;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">b.__proto__;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到 a 对象和 b 函数的原型不太一样。</p></blockquote><h2 id="普通字面量对象的原型"><a href="#普通字面量对象的原型" class="headerlink" title="普通字面量对象的原型"></a>普通字面量对象的原型</h2><p>字面量对象实际上是由 JS 引擎调用原生构造函数<code>Object</code>来生成的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;; <span class="comment">// 相当于 var a = new Object();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过new Object，因此Object.prototype 分配给了实例 a 的[[Prototype]]</span></span><br><span class="line">a.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a实例由Object函数构造生成，所以其constructor 就是 Object</span></span><br><span class="line">a.constructor === <span class="built_in">Object</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.prototype除了constructor外还有许多方法，比如toString，因此a可以使用这些方法（a上不存在，顺着原型查找）</span></span><br><span class="line">a.toString(); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure><h2 id="函数的原型"><a href="#函数的原型" class="headerlink" title="函数的原型"></a>函数的原型</h2><p>当打印函数的原型，发是一个原生的函数方法–!。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">b.__proto__; <span class="comment">// f() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>不要慌，我们可以按照普通字面量的方式猜想，b 函数这种写法，实际上也是调用了内建<code>Function</code>来创建的。比如<code>new Function()</code>，所以 b 函数是内建<code>Function</code>的实例。我们可以推断出 b 函数的原型继承了<code>Function.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">b.__proto__ === <span class="built_in">Function</span>.prototype; <span class="comment">// true 结果证明是对的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因此我们的b函数可以使用 Function.prototype上的方法，常见的如函数的apply,call,bind等等。</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.apply; <span class="comment">//  f() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>这也佐证了上面所提到的，<code>prototype</code>并不是原型对象本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">b.prototype === b.__proto__; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>是的，<code>b.prototype</code>真的就只是一个普普通通，简简单单的常规属性而已，它跟<code>__proto__</code>没有任何关系，只不过<code>protoype</code>有默认的对象值<code>&#123;constructor: f b() &#123;&#125;&#125;</code></p><p>那为什么我们要去拓展<code>b.prototype</code>呢？它根本不是原型，扩展的意义是什么呢？</p><p>没错，**<code>protototype</code>不是原型，但是它所引用的对象，可以作为实例的原型<strong>。当你通过<code>new b()</code>形式创建出一个实例对象时，<code>b.prototype</code>被作为实例对象的<code>[[Prototype]]</code>啦！这就是为什么我们要往<code>prototype</code>上去扩展的原因，</strong>从实例的角度来看，<code>prototype</code>又是原型**，如下证明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Parent();</span><br><span class="line">parent.__proto__ === Parent.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>早期，访问原型对象的方法，是通过<code>F.prototype</code>，只有函数才有这个属性。后期浏览器厂商实现了<code>__proto__</code>访问器，以及 ES 标准<code>setPrototypeOf</code>和<code>getPrototypeOf</code>。</li><li>函数创建时，会自动带有<code>prototype</code>属性，属性值是个对象，里面包含<code>construnctor</code>，<code>constructor</code>指向了函数本身，可以用来判断实例由谁构造生成，但并不准确，因为<code>prototype</code>可以被更改。稳妥的做法是，不要重写<code>prototype</code>对象，而只是在其上增加属性和方法。</li><li><code>F.prototype</code>只是一个常规属性，并无魔法。只有在通过<code>new F()</code>来创建实例时才有用，<code>F.prototype</code>会被用作创建实例的<code>[[Prototype]]</code>。</li><li>字面量对象的原型是一个对象，而函数的原型是一个内建函数。而且函数的原型并不等于<code>F.prototype</code>，侧面证明了<code>prototype</code>只是一个普通属性。</li><li>从生成的实例的角度去看构造函数的<code>prototype</code>，它又是原型对象。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;详细分析原型对象的构成和作用，理清&lt;code&gt;prototype&lt;/code&gt;，&lt;code&gt;__proto__&lt;/code&gt;相关的关系。&lt;/p&gt;
&lt;h1 id=&quot;prototype&quot;&gt;&lt;a href=&quot;#prototype&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>探究JS继承</title>
    <link href="https://690554125.github.io/2020/12/30/2020/%E6%8E%A2%E7%A9%B6%E7%BB%A7%E6%89%BF/"/>
    <id>https://690554125.github.io/2020/12/30/2020/%E6%8E%A2%E7%A9%B6%E7%BB%A7%E6%89%BF/</id>
    <published>2020-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:35:44.757Z</updated>
    
    <content type="html"><![CDATA[<p>JS 世界的继承如何实现，原型在继承中的作用，以前的继承和现在的继承。</p><h2 id="原型查找机制"><a href="#原型查找机制" class="headerlink" title="原型查找机制"></a>原型查找机制</h2><p>JS 中继承依赖原型实现，访问一个实例不存在的属性时，会去实例的原型对象上查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Parent.prototype.run = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Parent();</span><br><span class="line">person.run; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果实例原型上不存在，则会去实例原型的原型上查找，以此类推直到<strong>原型顶端，也就是 null</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a.__proto__; <span class="comment">// Object.prototype</span></span><br><span class="line">a.__proto__.__proto__; <span class="comment">// 也就是 Object.prototype.__proto__  = null</span></span><br></pre></td></tr></table></figure><p>JS 中一切皆对象，函数也是对象，我们看看函数的<strong>原型链</strong>（原型-原型-原型-…这种链式，被称为原型链）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">b.__proto__ === <span class="built_in">Function</span>.prototype; <span class="comment">// true f () &#123; [native code] &#125; 也就是 Function.prototype</span></span><br><span class="line">b.__proto__.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true 也就是Function.prototype.__proto__，别忘了Function.prototype也是对象，所以其原型是 Object.prototype。这也说明了，JS中一切皆对象！</span></span><br><span class="line">b.__proto__.__proto__.__proto__ === <span class="literal">null</span>; <span class="comment">// true Object.prototype.__proto__ === null 到头了</span></span><br></pre></td></tr></table></figure><p>配合 JS 原型链查找机制，因此出现了 JS 版本的继承。</p><h2 id="new-实例化"><a href="#new-实例化" class="headerlink" title="new 实例化"></a>new 实例化</h2><p>JS 中通过<code>构造函数</code>来模拟类，通过<code>prototype</code>来模拟继承。类的实例化则需要用<code>new</code>关键字，<code>new F()</code>。我们看看<code>new</code>做了些什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>目前我们就看到<code>new</code>做了三件事：</p><ol><li>创建了一个新的对象</li><li>返回了该对象**赋值给了<code>a变量</code>。</li><li>并且 a 实例的<code>[[Prototype]]</code>关联到了<code>Person.prototype</code>，我们可以通过 a.xx 访问到<code>Person.prototype</code>的方法和属性，还记得吧！</li></ol><p>因为构造函数模拟了类，类是可以有属性和方法的，我们来给上面的<code>Person</code>类加点料</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name; <span class="comment">// 类属性</span></span><br><span class="line">  <span class="built_in">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 类方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line">a.name; <span class="comment">// Jack</span></span><br><span class="line">a.sayHi(); <span class="comment">// Hi Jack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Person(<span class="string">&#x27;Loose&#x27;</span>);</span><br><span class="line">b.name; <span class="comment">// Loose</span></span><br><span class="line">b.sayHi(); <span class="comment">// Hi Loose</span></span><br></pre></td></tr></table></figure><p>可以看到，通过<code>Person</code>类，我们声明了 2 个实例 <code>a 和 b</code>，分别访问 <code>name</code> 和 <code>sayHi</code> 方法，使用了实例自己的 <code>name</code> 值，所以<code>Person</code>类在实例化时，里面的 <code>this</code> 指向了实例对象。</p><p>所以<code>new</code>一共做了四件事。</p><ol start="4"><li>实例化时将 this 指向新的对象。</li></ol><p>模拟实现一个简单的<code>new</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function myNew(Constructor, Params) : object</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  obj.__proto__ = fn.prototype; <span class="comment">// 或者 var obj = Object.create(fn.prototype)</span></span><br><span class="line">  <span class="keyword">var</span> result = fn.apply(obj, [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)); <span class="comment">// 调用构造函数fn，并且注意绑定this到新对象，这里就是obj。给构造函数fn的其他参数要排除fn自身。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> ? result : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="谁继承谁"><a href="#谁继承谁" class="headerlink" title="谁继承谁"></a>谁继承谁</h2><p>只有一个类，谈不上继承，至少需要一个父类，一个子类继承父类。JS 继承依赖的是原型，请牢记！</p><p>接着，先看一个错误的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Son.prototype = Parent.prototype; <span class="comment">// 这不是继承，这是赤裸裸的让子类原型 和 父类原型 指向同一个对象。</span></span><br><span class="line">Son.prototype.constructor = Son; <span class="comment">// 纠正上面一行导致constructor被改写的问题，让它指向正确值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">son.constructor === Son; <span class="comment">// true 没问题，毕竟上面重写了constructor</span></span><br><span class="line">son.__proto__ === Son.prototype; <span class="comment">// true</span></span><br><span class="line">son.__proto__ === Parent.prototype; <span class="comment">// true</span></span><br><span class="line">son.__proto__.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 而且</span></span><br><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Parent();</span><br><span class="line">parent.constructor === Parent; <span class="comment">// false 因为父子类原型都相等了，且上Son.prototype.constructor = Son，导致父类实例现在出问题了。</span></span><br></pre></td></tr></table></figure><p>上面的例子并没有体现<code>Son</code>继承了<code>Parent</code>，而是直接让父子类的原型相等了，还导致父类实例的<code>constructor</code>指向到了<code>Son</code>上，完全错误！</p><p>原型继承要达到的是子类原型 继承自 父类的原型，也就是<code>son.__proto__.__proto__ === Parent.prototype</code>，且父类实例和子类实例的<code>constructor</code>都要指向正确的值才对。</p><p>我们看看正确的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Son.prototype = <span class="keyword">new</span> Parent(); <span class="comment">// 这里实现继承！new Parent()返回了一个对象，这里是一个空的&#123;&#125;，但是其原型指向的时Parent.prototype对象哦，也就是&#123;constructor: Parent&#125;</span></span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">son.constructor === Son; <span class="comment">// true</span></span><br><span class="line">son.__proto__ === Son.prototype; <span class="comment">// true</span></span><br><span class="line">son.__proto__.__proto__ === Parent.prototype; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Parent();</span><br><span class="line">parent.constructor === Parent; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这下没问题了，可以看到<code>son</code>实例的原型指向<code>Son类</code>，而<code>Son类</code>又继承自<code>Parent类</code>。各自类实例的<code>constructor</code>指向也正确。</p><h2 id="继承版本演进"><a href="#继承版本演进" class="headerlink" title="继承版本演进"></a>继承版本演进</h2><h3 id="常见形式（原型继承）"><a href="#常见形式（原型继承）" class="headerlink" title="常见形式（原型继承）"></a>常见形式（原型继承）</h3><p>最常见的形式是将属性写在构造函数中，方法写在原型对象上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.arr = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Parent(); <span class="comment">// *</span></span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line">son.arr.push(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">son.print(); <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son2 = <span class="keyword">new</span> Son();</span><br><span class="line">son2.print(); <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>son2 不应该打印出<code>[1]</code>。原因是上面*所在的代码导致，<code>Son.prototype</code>等于<code>&#123;arr: []&#125;</code>，后面实例化的<code>son1 son2</code>访问的都是原型上的<code>arr</code>，引用类型，因此<code>son2.arr</code>也打印<code>[1]</code>。</p><p>子类实例共享了原型对象上的属性，这种继承是有问题的。所以解决方案就是共享属性移到每个实例自己身上就可以了。</p><h3 id="组合继承模式（借用构造函数-原型继承）"><a href="#组合继承模式（借用构造函数-原型继承）" class="headerlink" title="组合继承模式（借用构造函数+原型继承）"></a>组合继承模式（借用构造函数+原型继承）</h3><p>借用构造函数，意思是<code>Parent</code>在<code>Son</code>中调用，类似<code>class</code>继承中的<code>super</code>调用。注意处理<code>this</code>指向，毕竟是借用，<code>this</code>需要指向<code>Son</code>，不然借用无意义。另外，借用还让我们有机会往父类构造函数传参。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.arr = [];</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr);</span><br><span class="line">&#125;;</span><br><span class="line">Parent.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="built_in">this</span>, name); <span class="comment">// *</span></span><br><span class="line">&#125;</span><br><span class="line">Son.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son1 = <span class="keyword">new</span> Son(<span class="string">&#x27;1st son&#x27;</span>);</span><br><span class="line">son1.arr.push(<span class="number">1</span>); <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son2 = <span class="keyword">new</span> Son(<span class="string">&#x27;2rd son&#x27;</span>);</span><br><span class="line">son2.print(); <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">son1.arr === son2.arr; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">son1.say(); <span class="comment">// 1st son</span></span><br><span class="line">son2.say(); <span class="comment">// 2rd son</span></span><br></pre></td></tr></table></figure><p>上面的*实现了借用构造功能，调用时，this 指向的是 son 实例本身，因此<code>Parent</code>构造函数中的代码会往实例本身添加<code>arr</code>和<code>name</code>属性。<code>Son</code>实例各自拥有自身属性，但方法依旧共享<code>Parent.prototype</code>上的。</p><p>这种模式的缺点在于：</p><ul><li><code>Parent</code>被调用了 2 次，一次是<code>Son</code>内借用，一次是<code>Son.prototype</code>设置</li><li><code>arr</code>和<code>name</code>属性也被创建了 2 次，因为<code>Parent</code>调用了 2 次。在<code>Son</code>的实例身上和<code>Son.prototype</code>原型身上分别创建了，然后 <strong>遮蔽效应</strong> 让我们在访问 <code>son1.arr</code>时，优先从自身找到<code>arr</code>属性，而不是原型上的。从下图我们可以看出。</li></ul><p><img src="/images/Jietu20200529-212414.jpg" alt="组合继承"></p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>上面的组合继承的缺点就是调用了 2 次，那我们就想办法只调用一次<code>Parent</code>就可以了。</p><p>分析下，<code>Son</code>在通过<code>new</code>实例化的时候，需要将属性挂载到实例身上，否则多个实例就共用了属性，所以<code>Son</code>内的借用构造函数不能省略，这是让<code>Son</code>实例有自身属性的唯一办法。那就只能从<code>Son.prototype = new Parent()</code>身上想办法，用别的方式来继承。</p><h4 id="Object-create-proto-propertiesObject"><a href="#Object-create-proto-propertiesObject" class="headerlink" title="Object.create(proto[, propertiesObject])"></a>Object.create(proto[, propertiesObject])</h4><p>这个是 ES 标准中的方法，创建一个新对象，使用传入的<code>proto</code>作为原型，并返回这个新对象。第二个参数是自定义新对象的一些属性，和<code>Object.defineProperties</code>方法的参数一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parentProto = &#123;</span><br><span class="line">  <span class="attr">say</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;say hi&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(parentProto);</span><br><span class="line">obj.say(); <span class="comment">// say hi</span></span><br><span class="line">obj.__proto__ === parentProto; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但这个方法也有一个缺陷，就是引用类型值共享了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parentProto = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">Object</span>.create(parentProto);</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="built_in">Object</span>.create(parentProto);</span><br><span class="line"></span><br><span class="line">o1.arr.push(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(o2.arr); <span class="comment">// [1] 因为访问的都是原型对象上的arr。</span></span><br></pre></td></tr></table></figure><h5 id="模拟-Object-create"><a href="#模拟-Object-create" class="headerlink" title="模拟 Object.create"></a>模拟 Object.create</h5><p>IE9 以下是不支持这个方法的，所以考虑到浏览器兼容，我们可以模拟这个方法。</p><p>模拟的关键就是理解<code>Object.create</code>干了什么事。</p><ol><li>创建了一个新的对象</li><li>将参数设置为新对象的原型</li><li>返回这个新对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjectCreate</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能如<code>Object.create</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjectCreate</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parentProto = &#123;</span><br><span class="line">  <span class="attr">say</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;say hi&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = ObjectCreate(parentProto);</span><br><span class="line">obj.say(); <span class="comment">// say hi</span></span><br></pre></td></tr></table></figure><p>寄生组合式继承需要用到的<strong>关联原型</strong>我们已经说清楚，该功能就是用来解决寄生组合继承开篇说到的<code>Parent</code>被多<code>new</code>了一次来关联原型。</p><p>我们来用寄生组合模式重写组合继承模式中 demo。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.arr = [];</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr);</span><br><span class="line">&#125;;</span><br><span class="line">Parent.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="built_in">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Son.prototype = new Parent();</span></span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Parent.prototype); <span class="comment">// 原型关联方法改造。兼容IE9以下可以使用上面的模拟Object.create函数ObjectCreate</span></span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son1 = <span class="keyword">new</span> Son(<span class="string">&#x27;1st son&#x27;</span>);</span><br><span class="line">son1.arr.push(<span class="number">1</span>); <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son2 = <span class="keyword">new</span> Son(<span class="string">&#x27;2rd son&#x27;</span>);</span><br><span class="line">son2.print(); <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">son1.arr === son2.arr; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">son1.say(); <span class="comment">// 1st son</span></span><br><span class="line">son2.say(); <span class="comment">// 2rd son</span></span><br></pre></td></tr></table></figure><p>从下图可以看出，属性没有重复声明了。<br><img src="/images/Jietu20200529-212609.jpg" alt="寄生组合式继承"></p><h3 id="ES6-的继承"><a href="#ES6-的继承" class="headerlink" title="ES6+的继承"></a>ES6+的继承</h3><p>自从 ES6 推出了<code>class</code>和<code>extends</code>语法后，JS 中继变得简单了，可以将新的语法看成是函数继承的语法糖，核心功能还是通过<code>prototpye</code>来实现继承，之外有些表现是不同于 ES5 的继承。</p><p>使用新语法改写上面的父子类 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.arr = [];</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son1 = <span class="keyword">new</span> Son(<span class="string">&#x27;1st son&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> son2 = <span class="keyword">new</span> Son(<span class="string">&#x27;2rd son&#x27;</span>);</span><br></pre></td></tr></table></figure><p>有哪些区别？</p><ul><li><code>class</code>必须通过<code>new</code>调用</li><li><code>class</code>上所有的属性和方法，均不可枚举。</li><li><code>class</code>存在声明提升（赋值没有）</li><li><code>class</code>继承，子类<code>constructor</code>里<strong>必须先调用<code>super()</code>调用父类构造函数</strong>。因为子类期望父类的<code>constructor</code>来完成 <code>new F()</code>干的事，否则没有新对象，无法赋值<code>this</code></li><li>因为函数就是内置<code>Function</code>的实例，所以<code>Son.__proto__</code>指向的是<code>Function.prototype</code>，而类写法<code>Son.__proto__</code>指向的是<code>Parent</code>，因为<code>Son</code>继承自<code>Parent</code>么，利索当然原型应该指向<code>Parent</code>，在通过<code>babel</code>转换语法后，可以看到实现是：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> Son = <span class="built_in">Object</span>.create(Parent);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>继承的根本就是原型链的继承（委托），不管是 ES5 还是 ES6+时代。</li><li>ES5 时代前的继承是通过函数来模拟实现的。其中最完美的方式是<strong>寄生组合式继承</strong>，也就是基于<code>prototype</code>来书写公共方法，基于<code>Object.create</code>（模拟函数）来让子类关联父类的原型对象。</li><li>我们在 ES5 继承模式中，顺带也清楚了解的<code>new</code>的工作以及模拟<code>new</code>的实现，还有<code>Object.create</code>的工作及其模拟实现。</li><li>ES6 时代的<code>class</code>语法，继承实现，以及它和函数继承的一些差别。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JS 世界的继承如何实现，原型在继承中的作用，以前的继承和现在的继承。&lt;/p&gt;
&lt;h2 id=&quot;原型查找机制&quot;&gt;&lt;a href=&quot;#原型查找机制&quot; class=&quot;headerlink&quot; title=&quot;原型查找机制&quot;&gt;&lt;/a&gt;原型查找机制&lt;/h2&gt;&lt;p&gt;JS 中继承依赖原型实</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>学习Redux</title>
    <link href="https://690554125.github.io/2020/12/30/2020/%E6%90%9E%E6%87%82redux/"/>
    <id>https://690554125.github.io/2020/12/30/2020/%E6%90%9E%E6%87%82redux/</id>
    <published>2020-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:35:00.566Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为什么有这篇文章？<br>因为使用 react 技术栈有一段时间了，相应的 redux 状态管理库也使用很久，偶尔一段时间不用，发现就会忘记某些 api，甚至是看过的主要是实现原理又忘的一干二净。<br>所以总结一下，以便忘记后查阅，迅速让大脑有个印象。</p></blockquote><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>一个单向数据流的状态管理库。</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>APP 应用整个的状态都存放在单一的<code>Store</code>中心，修改<code>Store</code>的唯一途径就是发起<code>Action</code>，<code>Action</code>到达<code>Store</code>后，会根据<code>Action</code>提供的动作类型，新的数据，结合旧的状态合成一个新的状态，这个合成新状态的过程称为<code>Reducer</code>。</p><ul><li><p><strong>Reducer</strong> 实际上就是一个纯函数，相同输入，得到相同输出，输出 state。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Action</strong> 实际上是一个标注的 JS 对象，具有<code>type</code>属性，这是约定的，动作的类型，以便<code>reducer</code>针对不同动作，处理不同逻辑返回新的 state。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addAction = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">  <span class="attr">otherData</span>: <span class="string">&#x27;add num&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：不能直接修改旧<code>Store</code>，而是生成一份新的<code>Store</code>。目的是为了能够跟踪状态变化，一切有迹可循。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>搭配<code>React</code>数据驱动视图框架，食用更佳！</p><ol><li><p>创建数据中心<code>Store</code>。接收一个 reducers 函数，该函数用于生成状态数据，无任何<code>action</code>时，<code>reducer</code>的计算将默认返回它所拥有的所有<code>state</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Store = createStore(reducers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Store;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>createStore</code>所需的<code>reducers</code>。reducers 是一个函数，返回<code>store</code>。通常我们会有很多页面和组件，每个页面或组件有自己的<code>reducer</code>生成的<code>state</code>，将多个<code>reducer</code>合并为一个大的<code>reducers</code>就是整个 APP 应用需要的<code>store</code>。这种拆分方式方便我们对<code>state</code>业务数据模块化，每个模块只要负责维护部分数据即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer只是一个函数，通过对之前的state和当前action的类型及参数的处理，返回新的的state</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducerOne</span>(<span class="params">preState, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一般惯用switch case形式</span></span><br><span class="line">  <span class="comment">// 你也可以用if else if</span></span><br><span class="line">  <span class="keyword">const</span> &#123; type &#125; = action;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: preState + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducerTwo</span>(<span class="params">preState, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>createStore</code>只接受一个函数，所以我们可以利用<code>redux</code>提供的<code>combineReducers</code>，自动调用多个<code>reducer</code>，获取它们的<code>state</code>合并一下。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;为什么有这篇文章？&lt;br&gt;因为使用 react 技术栈有一段时间了，相应的 redux 状态管理库也使用很久，偶尔一段时间不用，发现就会忘记某些 api，甚至是看过的主要是实现原理又忘的一干二净。&lt;br&gt;所以总结一下，以便忘记后查阅，迅速让大脑有个</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Babel7 常见配置和概念。</title>
    <link href="https://690554125.github.io/2019/12/30/2019/babel7/"/>
    <id>https://690554125.github.io/2019/12/30/2019/babel7/</id>
    <published>2019-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:30:45.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我这里就用<code>yarn</code>了，<code>npm</code>一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/core @babel/cli @babel/preset-env -D</span><br><span class="line">yarn add @babel/polyfill</span><br></pre></td></tr></table></figure><p>大致先说下装了些啥，<code>core</code>核心，<code>cli</code>工具，可以让我们使用命令行来运行<code>babel</code>命令。</p><p><code>preset-env</code>主角之一，env 是已经在浏览器标准中的意思，Babel 官方的一个新 API 插件集合，可以将一些 ES6+的新 API 转换成 ES5。搭配<code>polyfill</code>主角之一，模拟一个 ES6+的环境，让我们可以使用新的特性。如<code>promise</code>等。</p><h2 id="怎么配置-Babel"><a href="#怎么配置-Babel" class="headerlink" title="怎么配置 Babel"></a>怎么配置 Babel</h2><p>官方推荐用<code>babel.config.js</code>，我们可以在里面写 JS，比如对环境<code>ENV</code>不同，做一些不同的配置。也支持<code>.babelrc</code>文件，这是个独立的文件，通常跟放在项目的根目录。当然你也可以写在<code>package.json</code>中，以<code>babel</code>为<code>key</code>来写配置。</p><p>大抵最终导出的其实就两样东西，<code>plugins</code>和<code>presets</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">presets</span>: [],</span><br><span class="line">  <span class="attr">plugins</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Plugins-配置"><a href="#Plugins-配置" class="headerlink" title="Plugins 配置"></a>Plugins 配置</h2><p>数组格式，可以省略<code>babel-plugin-</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;myPlugin&quot;</span>, <span class="comment">// 同等</span></span><br><span class="line">    <span class="string">&quot;babel-plugin-myPlugin&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对域的写法同样适合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;@babel/babel-plugin-name&quot;</span>, <span class="comment">// 同等</span></span><br><span class="line">    <span class="string">&quot;@babel/name&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果单独某个插件需要配置项，则在数组第二个位置写个配置对象。每个插件即一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;transform-async-to-module-method&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;module&quot;</span>: <span class="string">&quot;bluebired&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，<code>presets</code>也是这样对单独项写配置。</p><p><strong>注意加载顺序</strong></p><ol><li><code>plugins</code>是从第一个到最后一个。</li><li><code>presets</code>是从最后一个到第一个。原因官方说是大部分用户会喜欢<code>es2015</code>写在前面，</li><li>插件在<code>presets</code>之前开始。</li></ol><h2 id="Presets"><a href="#Presets" class="headerlink" title="Presets"></a>Presets</h2><p>顾名思义，预设。官方提供的<code>@babel/preset-env</code>等其实本质就是一个插件数组而已，无非是用了哪些插件。支持包含带选项的<code>plugin</code>或其他<code>presets</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="string">&#x27;pluginA&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;pluginB&#x27;</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;pluginC&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">opt</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">presets</span>: [<span class="built_in">require</span>(<span class="string">&#x27;@babel/preset-env&#x27;</span>)]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于路径这块，可以绝对，相对路径，也可以全名（从<code>node_modules</code>上找）。</p><p>至于配置的写法，在<code>Plugins</code>中已经说过。这里再提醒下，<code>presets</code>是倒序的。</p><h2 id="关于配置文件"><a href="#关于配置文件" class="headerlink" title="关于配置文件"></a>关于配置文件</h2><p>这里注意下有个<code>Monorepo</code>的目录模式。大致意思就是多个 repo，在同一个 package 中管理。</p><h2 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h2><p>之前提到过，模拟 ES5+的环境。也会少量的在原型链如 String 上添加一些方法，如<code>includes</code>。官方推荐使用<code>@babel/preset-env</code>，并且设置该<code>presets</code>选项的配置<code>useBuildIns</code>使用。这样可以达到的效果，我们只需要引入我们用到的<code>polyfill</code>代码。</p><p>如果你需要所有的ES5+的静态方法，实例方法已经新的API，那你就需要手动在入口文件顶部导入<code>@babel-polyfill</code>，缺点是，这样子是会污染全局环境的。</p><h2 id="使用位置"><a href="#使用位置" class="headerlink" title="使用位置"></a>使用位置</h2><p>不管是<code>CommonJS</code>还是<code>ES6 Modules</code>，我们都需要在应用的入口文件的顶部，加载<code>@babel/polyfill</code>。</p><p>和<code>webpack</code>构建工具一起使用的话，我们有 3 种方式引入<code>polyfill</code>。在<code>.babelrc</code>中对<code>presets</code>里的<code>env</code>进行配置项设置，设置<code>useBuildIns</code>。</p><ol><li>默认是<code>false</code>，相当于着在<code>webpack.config.js</code>的<code>entry</code>数组头部直接加入。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: [<span class="string">&#x27;@babel/polyfill&#x27;</span>, <span class="string">&#x27;./app.js&#x27;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>设为<code>usage</code>，不会在任何地方导入<code>@babel/polyfill</code>，而是用到哪些导哪些，但依旧需安装<code>@babel/polyfill</code></li><li>设为<code>entry</code>，在入口文件的头部加载。</li></ol><p><strong>注意</strong><br>在<code>Babel6.x</code>中，<code>useBuildIns</code>只有<code>true</code>和<code>false</code>。</p><h2 id="plugin-transform-runtime"><a href="#plugin-transform-runtime" class="headerlink" title="plugin-transform-runtime"></a>plugin-transform-runtime</h2><p>这个插件，可以重用<code>Babel</code>注入的辅助代码，目的是为了减少代码体积。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发依赖</span></span><br><span class="line"><span class="string">`yarn add @babel/plugin-transform-runtime -D`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产依赖</span></span><br><span class="line"><span class="string">`yarn add @babel/runtime`</span></span><br></pre></td></tr></table></figure><p>前者主要是将<code>helper</code>代码自动从<code>babel-runtime/core-js</code>中引入，不需要我们手动去写。后者相当于一个独立出来的模拟ES5+的环境包，是在打包的时候需要用到的，但为了不污染全局，一些实例属性不能使用。所以这两者是搭配使用的。</p><h2 id="常用实践"><a href="#常用实践" class="headerlink" title="常用实践"></a>常用实践</h2><p>希望达到，复用代码，缩小代码体积，功能还能很全的目标。</p><p><strong>复用代码</strong>，我们需要使用<code>transform-runtime-plugin</code>，在开发阶段，自动重写我们的导入代码，全部从<code>babel/runtime</code>中导入。</p><p><strong>缩小代码体积</strong>，我们需要按需加载，<code>transform-runtime-plugin</code>和<code>babel/runtime</code>结合使用就可以达到按需加载，插件会分析我们用到了哪些新的API，如<code>promise</code>，则从<code>import promise2 from &#39;@babel/runtime/core-js/promise</code>，注意到这里使用的是promise2，所以避免了全局污染。</p><p><strong>功能全</strong>，光有<code>@babel/runtime</code>，还不够，它只能帮我们模拟出大部分ES5+环境，但是如<code>&#39;hello&#39;.includes(&#39;h&#39;)</code>等实例方法，是没有的，原因就是不污染全局环境。所以我们还需要<code>babel-polyfill</code>，但是<code>babel-polyfill</code>包含了完整的ES5+环境，包很大，且数据全局环境引入，会导致污染。所以我们需要一个<code>babel-preset-env</code>，这个预置其实就是包含了很多<code>plugins</code>，需要哪个，我们用哪个，可以根据开发环境来选择，已达到最小使用<code>babel-polyfill</code>，需要设置<code>useBuildIns</code>为<code>usage</code>，意为不直接引入<code>babel-polyfill</code>，而只单独加载用到的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;我这里就用&lt;code&gt;yarn&lt;/code&gt;了，&lt;code&gt;npm&lt;/code&gt;一样&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>webpack 模块化原理（ES+CJS）</title>
    <link href="https://690554125.github.io/2019/12/30/2019/es-cjs-module/"/>
    <id>https://690554125.github.io/2019/12/30/2019/es-cjs-module/</id>
    <published>2019-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:30:54.214Z</updated>
    
    <content type="html"><![CDATA[<p>接着上一篇**webpack 模块化原理(es)**。这篇我们看下 es+cjs，2 种模块混合书写，webpack 是如何处理的。demo 和之前差不多。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> print <span class="keyword">from</span> <span class="string">&#x27;./print&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(print); <span class="comment">// 应该是&#123;res: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// src/print.js cjs写法</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">exports</span>.res = res;</span><br></pre></td></tr></table></figure><p>通过 webpack 编译后，代码如下（同样，做了一些处理，去除分隔符，将模块的内部函数格式化下）<br />大部分跟上一篇中解释的一样，我们看下如下几个东西，在这个编译后的 <code>bundle</code>  中有使用到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">// The module cache</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The require function</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Check if module is in cache</span></span><br><span class="line">    <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = (installedModules[moduleId] = &#123;</span><br><span class="line">      <span class="attr">i</span>: moduleId,</span><br><span class="line">      <span class="attr">l</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">exports</span>: &#123;&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    modules[moduleId].call(</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      <span class="built_in">module</span>,</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      __webpack_require__</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line">  __webpack_require__.m = modules;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// expose the module cache</span></span><br><span class="line">  __webpack_require__.c = installedModules;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// define getter function for harmony exports</span></span><br><span class="line">  <span class="comment">// 处理cjs模块的辅助函数。通过给具体实现exports对象新增一个getter属性。</span></span><br><span class="line">  __webpack_require__.d = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, name, getter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!__webpack_require__.o(<span class="built_in">exports</span>, name)) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, name, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: getter &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// define __esModule on exports</span></span><br><span class="line">  __webpack_require__.r = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a fake namespace object</span></span><br><span class="line">  <span class="comment">// mode &amp; 1: value is a module id, require it</span></span><br><span class="line">  <span class="comment">// mode &amp; 2: merge all properties of value into the ns</span></span><br><span class="line">  <span class="comment">// mode &amp; 4: return value when already ns object</span></span><br><span class="line">  <span class="comment">// mode &amp; 8|1: behave like require</span></span><br><span class="line">  __webpack_require__.t = <span class="function"><span class="keyword">function</span> (<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">1</span>) value = __webpack_require__(value);</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">4</span> &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value &amp;&amp; value.__esModule)</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    __webpack_require__.r(ns);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(ns, <span class="string">&#x27;default&#x27;</span>, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: value &#125;);</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> value != <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> value)</span><br><span class="line">        __webpack_require__.d(</span><br><span class="line">          ns,</span><br><span class="line">          key,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value[key];</span><br><span class="line">          &#125;.bind(<span class="literal">null</span>, key)</span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">return</span> ns;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line">  <span class="comment">// 针对es和cjs的默认导出，做一些处理。让大家都统一。</span></span><br><span class="line">  <span class="comment">// 比如如果模块源码是es的，那么模块的exports.__esModule就会为true，在上一篇有解释过。</span></span><br><span class="line">  <span class="comment">// 该函数通过判断module.exports上有没有__esModule，来区分暴露默认导出应该怎么暴露。</span></span><br><span class="line">  <span class="comment">// 如果是cjs，它是没有默认导出这个概念的实际上暴露的都是往module.exports = exports，也就是exports身上挂属性。这也就是模块本身，也就是我们这里函数接收的参数module，直接暴露就好了。</span></span><br><span class="line">  <span class="comment">// 如果是es，它有默认导出，还有部分导出，默认导出挂在了module.exports.default属性上，其他的挂载modulex.exports[xx]上。所以暴露的时候要暴露defaults这个属性值（这个函数接的参数变量，实际上就是&#123;moduleId: xx, l: false, exports: &#123;&#125;&#125;中的exports，因为模块加载函数已经在底部返回了啊, return module.exports）。</span></span><br><span class="line">  <span class="comment">// 这里稍后（先去看1，2两步骤，在下面）让我们我们结合print.js来讲解</span></span><br><span class="line">  <span class="comment">// 3. module参数就是&#123;res: 1&#125;。因为print模块源码是cjs写的，所以它没有被打上__esModule=true的标记。</span></span><br><span class="line">  <span class="comment">// 因此，getter就是第二个函数getModuleExports，这个函数实际上就直接返回了&#123;res: 1&#125;</span></span><br><span class="line">  <span class="comment">// 接着，调用了d方法，给getModuleExports这个函数，赋了一个a的getter属性，当你访问这个a时，就是调用getModuleExports这个函数，然后又拿到了&#123;res: 1&#125;。可以看出来就是这样a: &#123;res: 1&#125;</span></span><br><span class="line">  <span class="comment">// d方法返回的就是getModuleExports这个函数。</span></span><br><span class="line">  __webpack_require__.n = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> getter =</span><br><span class="line">      <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule</span><br><span class="line">        ? <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">          &#125;</span><br><span class="line">        : <span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">          &#125;;</span><br><span class="line">    __webpack_require__.d(getter, <span class="string">&#x27;a&#x27;</span>, getter);</span><br><span class="line">    <span class="keyword">return</span> getter;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Object.prototype.hasOwnProperty.call</span></span><br><span class="line">  <span class="comment">// 借用了hasOwnProperty方法而已。</span></span><br><span class="line">  __webpack_require__.o = <span class="function"><span class="keyword">function</span> (<span class="params">object, property</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// __webpack_public_path__</span></span><br><span class="line">  __webpack_require__.p = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="comment">// 开始加载入口函数</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__((__webpack_require__.s = <span class="string">&#x27;./src/index.js&#x27;</span>));</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">&#x27;./src/index.js&#x27;</span>:</span><br><span class="line">    <span class="comment">/*! no exports provided */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span>, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">      &#x27;use strict&#x27;</span>;</span><br><span class="line">      <span class="built_in">eval</span>(</span><br><span class="line">        <span class="string">&#x27;__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./print */ &quot;./src/print.js&quot;);\n/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_print__WEBPACK_IMPORTED_MODULE_0__);\n\nconsole.log(_print__WEBPACK_IMPORTED_MODULE_0___default.a);\n\n//# sourceURL=webpack:///./src/index.js?&#x27;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="comment">//   __webpack_require__.r(__webpack_exports__)</span></span><br><span class="line">      <span class="comment">//   1、这里先用webpack自己的模块加载函数来加载print.js，这里函数还是会返回module.exports，只不过我们看print.js模块函数实现可以看到exports.res = res。所以我们这里拿到的就是&#123;res: 1&#125;这个对象而已。</span></span><br><span class="line">      <span class="comment">//   var _print__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span></span><br><span class="line">      <span class="comment">//     &#x27;./src/print.js&#x27;</span></span><br><span class="line">      <span class="comment">//   )</span></span><br><span class="line">      <span class="comment">//   2. 所以这里__webpack_require__.n(&#123;res: 1&#125;)，让我们看看上面这个n函数干了些啥？</span></span><br><span class="line">      <span class="comment">//   var _print__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(</span></span><br><span class="line">      <span class="comment">//     _print__WEBPACK_IMPORTED_MODULE_0__</span></span><br><span class="line">      <span class="comment">//   )</span></span><br><span class="line">      <span class="comment">//   4. 上面的n函数调用完了，返回的是getModuleExports这个函数，且这个函数还有个a属性的getter</span></span><br><span class="line">      <span class="comment">//   5. 赋值给_print__WEBPACK_IMPORTED_MODULE_0___default后，我们去调用这个函数的a属性，不言而喻，就是&#123;res: 1&#125;。至此大功告成！。</span></span><br><span class="line">      <span class="comment">//   console.log(_print__WEBPACK_IMPORTED_MODULE_0___default.a)</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;./src/print.js&#x27;</span>:</span><br><span class="line">    <span class="comment">/*! no static exports found */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(</span><br><span class="line">        <span class="string">&#x27;var res = 1;\nexports.res = res;\n\n//# sourceURL=webpack:///./src/print.js?&#x27;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// var res = 1</span></span><br><span class="line">      <span class="comment">// 因为源码是cjs模块，非es模块，所以没有给exports配__esModule=true的属性（这个配置是通过__webpack_exports__.r函数实现的）</span></span><br><span class="line">      <span class="comment">// exports.res = res</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接着上一篇**webpack 模块化原理(es)**。这篇我们看下 es+cjs，2 种模块混合书写，webpack 是如何处理的。demo 和之前差不多。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>webpack 模块化原理（ES 的）</title>
    <link href="https://690554125.github.io/2019/12/30/2019/es-module/"/>
    <id>https://690554125.github.io/2019/12/30/2019/es-module/</id>
    <published>2019-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:31:14.755Z</updated>
    
    <content type="html"><![CDATA[<p>写了一个最简单的 demo，webpack 配置也是最简的，主要是弄清楚 webpack 如何实现模块的加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> print <span class="keyword">from</span> <span class="string">&#x27;./print&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(print);</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/print.js</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> res;</span><br></pre></td></tr></table></figure><p>接下来通过 webpack 打包，贴上打包的代码（对打包的代码稍微处理了下，去掉了一些分隔符，并且将 2 个模块中的代码格式化了下，打包的是通过 eval 来执行的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以看到，一个IIFE函数，接收一个参数modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的modules就是最下面自执行传入的一个对象，对象中包含了index.js 和 print.js通过webpack加工后的的具体实现代码。</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">// The module cache</span></span><br><span class="line">  <span class="comment">// 官方注释：模块的缓存对象，主要是希望加载过的模块不在执行第二遍。</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The require function</span></span><br><span class="line">  <span class="comment">// 模块的加载函数，核心部分，实现了模块的加载。</span></span><br><span class="line">  <span class="comment">// 接收一个参数模块id，这里其实就是&#x27;./src/index.js&#x27;和&#x27;./print/index.js&#x27;。</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Check if module is in cache</span></span><br><span class="line">    <span class="comment">// 第一步，检查模块缓存对象是否已经有过了，如果有了，就是返回出去。</span></span><br><span class="line">    <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="comment">// 如果没有，就把模块创建出来，并且也挂到缓存模块对象installedModules上。</span></span><br><span class="line">    <span class="comment">// 这里利用了=的返回值的技巧。既将模块对象&#123;i: xx, l: xx, exports: xx&#125;赋值给了缓存模块上对应的模块key上，也赋值给了module变量</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = (installedModules[moduleId] = &#123;</span><br><span class="line">      <span class="comment">// 就是标记模块的ID，这里也就是&#x27;./src/index.js&#x27;，&#x27;./src/main.js&#x27;</span></span><br><span class="line">      <span class="attr">i</span>: moduleId,</span><br><span class="line">      <span class="comment">// 模块是否加载过，一个标志符。</span></span><br><span class="line">      <span class="attr">l</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// 模块的具体实现，会有defaults和其他未挂载到defaults上的方法，比如exports function hello() &#123;&#125;</span></span><br><span class="line">      <span class="comment">// 那么exports对象就会被填充为exports: &#123;defaults: xxx, hello: xxx&#125;</span></span><br><span class="line">      <span class="comment">// 至于这里exports对象的填充，是在最下面的自执行函数传参的参数中写的。</span></span><br><span class="line">      <span class="attr">exports</span>: &#123;&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    <span class="comment">// 执行模块函数，可以注意到我们打包后的代码（每个模块）都被处理为了函数</span></span><br><span class="line">    <span class="comment">// 正事开始了，执行我们写的代码。使用call方法，将this指向模块的exports，因为exports里才是真正的代码实现。</span></span><br><span class="line">    <span class="comment">// 然后传递3个参数，模块整体，模块的exports，还有模块加载函数。</span></span><br><span class="line">    modules[moduleId].call(</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      <span class="built_in">module</span>,</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      __webpack_require__</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="comment">// 函数执行完后，将上面最开始创建新模块所声明的l，也就是模块加载标志符设为true，因为是对象，引用关系，缓存模块对象中对应的那个模块的加载标志也已经是true了</span></span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="comment">// 这步也很关键。</span></span><br><span class="line">    <span class="comment">// 浏览器目前不认识es6和cjs的模块加载，所以想要实现模块的加载，肯定是通过函数来实现。</span></span><br><span class="line">    <span class="comment">// 每个模块需要暴露出自己的值或API等，而上面一直在说模块代码的具体实现，是写在exports里的，所以，暴露它，让其他模块能使用被暴露模块的值。</span></span><br><span class="line">    <span class="comment">// 在下面的&#x27;./src/index.js&#x27;中可以看到，使用webpack模块加载函数引入了&#x27;./src/print/js&#x27;，并且使用了print.js中的值，这个值就是这里return暴露出去的。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line">  <span class="comment">// 模块都挂到模块加载函数的属性m上。具体作用没看出来。</span></span><br><span class="line">  __webpack_require__.m = modules;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// expose the module cache</span></span><br><span class="line">  <span class="comment">// 缓存模块对象也挂到模块加载函数的c属性上。</span></span><br><span class="line">  __webpack_require__.c = installedModules;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// define getter function for harmony exports</span></span><br><span class="line">  <span class="comment">// 实现了一个方法。看着像是定义对象的某个属性，并将该属性配置为可枚举，且给他了一个getter实现。</span></span><br><span class="line">  __webpack_require__.d = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, name, getter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!__webpack_require__.o(<span class="built_in">exports</span>, name)) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, name, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: getter &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// define __esModule on exports</span></span><br><span class="line">  <span class="comment">// 比较重要的一个函数，实现了对模块的一个类型定义，是不是es模块。</span></span><br><span class="line">  __webpack_require__.r = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a fake namespace object</span></span><br><span class="line">  <span class="comment">// mode &amp; 1: value is a module id, require it</span></span><br><span class="line">  <span class="comment">// mode &amp; 2: merge all properties of value into the ns</span></span><br><span class="line">  <span class="comment">// mode &amp; 4: return value when already ns object</span></span><br><span class="line">  <span class="comment">// mode &amp; 8|1: behave like require</span></span><br><span class="line">  <span class="comment">// 这个函数没看出来有什么作用。</span></span><br><span class="line">  __webpack_require__.t = <span class="function"><span class="keyword">function</span> (<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">1</span>) value = __webpack_require__(value);</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">4</span> &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value &amp;&amp; value.__esModule)</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    __webpack_require__.r(ns);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(ns, <span class="string">&#x27;default&#x27;</span>, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: value &#125;);</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> value != <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> value)</span><br><span class="line">        __webpack_require__.d(</span><br><span class="line">          ns,</span><br><span class="line">          key,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value[key];</span><br><span class="line">          &#125;.bind(<span class="literal">null</span>, key)</span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">return</span> ns;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line">  <span class="comment">// 获取默认导出的函数，好像是针对于哪些不协调的模块。</span></span><br><span class="line">  __webpack_require__.n = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> getter =</span><br><span class="line">      <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule</span><br><span class="line">        ? <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">          &#125;</span><br><span class="line">        : <span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">          &#125;;</span><br><span class="line">    __webpack_require__.d(getter, <span class="string">&#x27;a&#x27;</span>, getter);</span><br><span class="line">    <span class="keyword">return</span> getter;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Object.prototype.hasOwnProperty.call</span></span><br><span class="line">  <span class="comment">// 对象原型上一个函数的复用而已。</span></span><br><span class="line">  __webpack_require__.o = <span class="function"><span class="keyword">function</span> (<span class="params">object, property</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// __webpack_public_path__</span></span><br><span class="line">  __webpack_require__.p = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="comment">// 加载入口函数，比较重要，前面的一些辅助函数等都已经声明完了。</span></span><br><span class="line">  <span class="comment">// 这里开始从入口函数加载，开始执行我们的代码了。</span></span><br><span class="line">  <span class="comment">// 模块加载函数，这里也用了=的返回的技巧。</span></span><br><span class="line">  <span class="comment">// 我们将&#x27;./src/index.js&#x27;代入到上面的模块加载函数中去，逻辑解释如下：</span></span><br><span class="line">  <span class="comment">// 1. 检查缓存模块对象是否已经有了&#x27;./src/index.js&#x27;这个键名对应的模块，有则返回它的具体实现，也就是exports对象。</span></span><br><span class="line">  <span class="comment">// 2. 入口函数首次并没有被加载过，所以开始执行生成新模块的动作。var module = &#123;moduleId: &#x27;./src/index.js&#x27;, l: false, exports: &#123;&#125;&#125;</span></span><br><span class="line">  <span class="comment">// 3. 开始执行这个模块也就是&#x27;./src/index.js&#x27;对应的函数。用call的方式来调用，传递了3个参数。在下面的index.js具体实现中可以看到。我们来解读。</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__((__webpack_require__.s = <span class="string">&#x27;./src/index.js&#x27;</span>));</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">&#x27;./src/index.js&#x27;</span>:</span><br><span class="line">    <span class="comment">/*! no exports provided */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span>, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">      &#x27;use strict&#x27;</span>;</span><br><span class="line">      <span class="built_in">eval</span>(</span><br><span class="line">        <span class="string">&#x27;__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./print */ &quot;./src/print.js&quot;);\n\nconsole.log(_print__WEBPACK_IMPORTED_MODULE_0__[&quot;default&quot;]);\n\n//# sourceURL=webpack:///./src/index.js?&#x27;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 4. 首先调用定义模块是否是es的函数，将我们的&#x27;./src/index.js&#x27;这个模块对象&#123;moduleId: xx, l: false, exports: &#123;&#125;&#125;在添加一个__esModule: true的属性。的确我们在写代码时也就是用的es模块。</span></span><br><span class="line">      <span class="comment">// __webpack_require__.r(__webpack_exports__);</span></span><br><span class="line">      <span class="comment">// 5. 我们在index.js中引入了print.js，这里使用了模块加载器函数来加载print。加载的逻辑解析，【如上面的1，2，3步骤】。我们认为是6,7,8（开始执行print.js中的具体实现）吧，方便逻辑的继续。</span></span><br><span class="line">      <span class="comment">// var _print__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(&quot;./src/print.js&quot;);</span></span><br><span class="line">      <span class="comment">// 13. 啦啦啦，上面这一行，__webpack_require__加载的print.js，接上了第12步扔出来的对象&#123;default: 1, __esModule: true&#125;</span></span><br><span class="line">      <span class="comment">// 14. 打印了对象的default，也就是1。大工告成。</span></span><br><span class="line">      <span class="comment">// console.log(_print__WEBPACK_IMPORTED_MODULE_0__[&quot;default&quot;]);</span></span><br><span class="line">      <span class="comment">// 这里因为我们在源码没有在index模块暴露任何东西，可以看到这里转换后的实现，webpack也并没有对index模块的exports做过多的改造。</span></span><br><span class="line">      <span class="comment">// 好了index也执行完了，终于也把index模块的&#123;l: false&#125; 设为 true了。可以看到，print先设为true的，index是最后，因为print的调用和执行都在index中做的，属于index函数的一部分哦！</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;./src/print.js&#x27;</span>:</span><br><span class="line">    <span class="comment">/*! exports provided: default */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span>, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">      &#x27;use strict&#x27;</span>;</span><br><span class="line">      <span class="built_in">eval</span>(</span><br><span class="line">        <span class="string">&#x27;__webpack_require__.r(__webpack_exports__);\nvar res = 1;\n/* harmony default export */ __webpack_exports__[&quot;default&quot;] = (res);\n\n//# sourceURL=webpack:///./src/print.js?&#x27;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 9. 将print.js这个模块对象&#123;moduleId: &#x27;./src/print.js&#x27;, l: false, exports: &#123;&#125;&#125;也加一个__esModule: true的属性标记。</span></span><br><span class="line">      <span class="comment">// __webpack_require__.r(__webpack_exports__);</span></span><br><span class="line">      <span class="comment">// 10. 我们print.js源码里写的，可以看最上面的2个文件源码。</span></span><br><span class="line">      <span class="comment">// var res = 1;</span></span><br><span class="line">      <span class="comment">// 11. 源码里我们是export default形式暴露的res。所以这里帮我们将这种暴露挂到了exports.default上。</span></span><br><span class="line">      <span class="comment">// __webpack_exports__[&quot;default&quot;] = (res);</span></span><br><span class="line">      <span class="comment">// 12. 这步实际上就是__webpack_require__函数最后的return，将exports对象扔了出去。&#123;default: 1, __esModule: true&#125;</span></span><br><span class="line">      <span class="comment">// 这里要注意，模块函数执行完了，此时print模块的 &#123;l: false&#125; 已经变为true了。（模块加载函数中写的module.l = true，别忘了。）</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写了一个最简单的 demo，webpack 配置也是最简的，主要是弄清楚 webpack 如何实现模块的加载。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>node 查询和关闭进程</title>
    <link href="https://690554125.github.io/2019/12/30/2019/node-process/"/>
    <id>https://690554125.github.io/2019/12/30/2019/node-process/</id>
    <published>2019-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:31:26.651Z</updated>
    
    <content type="html"><![CDATA[<p>手头的 electron 项目，需要查询并关闭另外的程序，程序本身虽然是通过子进程方式启动，但是启动的仅是个壳，壳本身又自己启动了另一个程序 Z，导致无法通过子进程启动后的句柄拿到真正启动的程序 Z。所以无法监控到程序 Z 目前是开启还是关闭的。</p><p>解决方法就是 node 子进程模块的 <code>spawn</code>  去执行 windows 的 cmd 命令。该项目只在 windows 电脑运行，所以要用 windows 的命令行而非 liunx 命令。</p><blockquote><p>这里项目本身只在 windows 运行，所以执行的命令应该是 windows 下的，而不是 linux 命令。比如列出当前目录文件，windows 下用的是 <code>dir</code> ，而 linux 下用的是 <code>ls</code> 。两者是不同的，因为我的电脑安装了 <code>cmder</code> ，即可以调用 windows 命令也可以调用 linux 命令。win10 的话有 powershell，可能能支持 linux 命令</p></blockquote><p>直接在 cmd 里面运行查找进程的命令的话，是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasklist | findstr /i chrome.exe</span><br><span class="line"><span class="comment">// tasklist 查找系统进程后，查找的内容通过管道符 | 传递给另一个命令 findstr ，这个命令接收参数，这里接受了忽略大小写，然后查找chrome.exe关键字，并返回结果。</span></span><br></pre></td></tr></table></figure><p>这里的 <code>/i</code>  意味忽略大小写。</p><blockquote><p>另外要注意的是，查找进程名字如果很长的话，通过上面的命令，查找出来的进程名字会被截取，限制了 25 个字符好像。所以可以加另一个参数给 tasklist， <code>/fo csv</code>  以该模式输出，避免查找出的结果被截取。这样查找后的结果，是自带””的，如： <code>&quot;YoudaoDict.exe&quot;,&quot;5324&quot;,&quot;Console&quot;,&quot;1&quot;,&quot;37,028 K&quot;</code></p></blockquote><p>开始说正题，node 的子进程模块提供了 <code>exec</code>  和 <code>spawn</code> 2 种方式来调用，其中 <code>exec</code>  会起一个 shell 来执行传入的参数，而 <code>spawn</code>  不会起 shell。所以两种方法调用是有区别的。</p><p><a name="U2KVo"></a></p><h5 id="exec-方式"><a href="#exec-方式" class="headerlink" title="exec 方式"></a>exec 方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">`tasklist /fo csv | findstr /i YouDaoDict.exe`</span>, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`tasklist error: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`stdout <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`stderr <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="GAj2U"></a></p><h5 id="spawn-方式"><a href="#spawn-方式" class="headerlink" title="spawn 方式"></a>spawn 方式</h5><p>相比上面的写法，略麻烦，注意 tasklist 和 findstr 是 2 个命令，正如上面解释的那样，是 tasklist 运行获取的值给到 findstr 在做的筛选。因此通过 spawn 的方式，需要这么写：</p><p>这里涉及到了 <code>stdin stdout</code>  的使用，看起来像个流，简单理解下 <code>stdin</code>  就是函数的入参， <code>stdout</code>  就是函数的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tasklist = spawn(<span class="string">&#x27;tasklist&#x27;</span>, [<span class="string">&#x27;/fo&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>]);</span><br><span class="line"><span class="keyword">const</span> findstr = spawn(<span class="string">&#x27;findstr&#x27;</span>, [<span class="string">&#x27;/i&#x27;</span>, <span class="string">&#x27;AsmanVR-Win64-Shipping&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">tasklist.stdout.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 往findstr的输入中写入 tasklist的输出数据。</span></span><br><span class="line">  findstr.stdin.write(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">tasklist.stderr.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">`tasklist stderr: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">tasklist.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (code !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`tasklist进程退出，退出码：<span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  findstr.stdin.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">findstr.stdout.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 监听findstr的输出（就是运行返回的结果）</span></span><br><span class="line">  <span class="built_in">console</span>.log(data.toString()); <span class="comment">// 这里就是真正获取到查询结果的地方。</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">findstr.stderr.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`findstr stderr: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">findstr.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (code !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`findstr进程退出，退出码：<span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;手头的 electron 项目，需要查询并关闭另外的程序，程序本身虽然是通过子进程方式启动，但是启动的仅是个壳，壳本身又自己启动了另一个程序 Z，导致无法通过子进程启动后的句柄拿到真正启动的程序 Z。所以无法监控到程序 Z 目前是开启还是关闭的。&lt;/p&gt;
&lt;p&gt;解决方法就是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>webpack 的各种注入插件</title>
    <link href="https://690554125.github.io/2019/12/30/2019/webpack-inject-plugins/"/>
    <id>https://690554125.github.io/2019/12/30/2019/webpack-inject-plugins/</id>
    <published>2019-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:32:32.720Z</updated>
    
    <content type="html"><![CDATA[<p><code>webpack.DefinePlugin</code>  编译阶段，往 JS 注入定义的常量。实际上就是字符串的一个替换而已。所以我们在注入的时候，必须注入的是字符串，而非值本身。例如<br /></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    <span class="attr">BUILD_ENV</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="attr">BUILD_ENV</span>: <span class="built_in">JSON</span>.stringify(<span class="string">&#x27;test&#x27;</span>),</span><br><span class="line">    <span class="comment">// 如果是布尔值</span></span><br><span class="line">    <span class="attr">IS_TRUE</span>: <span class="string">&#x27;true&#x27;</span>, <span class="comment">// 不是 true哦！</span></span><br><span class="line">    <span class="attr">IS_TRUE</span>: <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><br /><code>HtmlWebpackPlugin</code>  插件，众所周知是方便创建一个配置好各种脚本注入的 HTML 文件的，可以自己提供一个 HTML 模板作为基础，然后在上面进行各种注入，插件支持 <code>EJS</code> ，所以，我们可以在 HTML 模板里使用 <code>&lt;%= HELLO %&gt;</code> 。插件本身支持了 <code>title</code>  字段，也就是 HTML 的 <code>title</code>  可以进行替换。我们也可以使用自定义的其他字段，在 HTML 模板里也可以使用。<br /></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="attr">inject</span>: <span class="literal">true</span>, <span class="comment">// 注入JS</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;文章标题&#x27;</span>,</span><br><span class="line">    <span class="comment">// custom key</span></span><br><span class="line">    <span class="attr">myName</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    <span class="attr">flag</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&lt;% if(htmlWebpackPlugin.options.flag) &#123;%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt; ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&lt;%= myName%&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br />CRA 脚手架提供了自带的 <code>InterpolateHtmlPlugin</code> ，提供类似上面的方法注入变量，只不过注入后的变量，这么用， <code>%PRO_ENV%</code> <br /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (&#x27;%PRO_ENV%&#x27; !== &#x27;pro&#x27; || &#x27;%NODE_ENV%&#x27; !== &#x27;development&#x27;) &#123;%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;%PUBLIC_URL%/libs/vconsole/vconsole.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (<span class="built_in">window</span>.engine.isAttached) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vConsole = <span class="keyword">new</span> VConsole();</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;webpack.DefinePlugin&lt;/code&gt;  编译阶段，往 JS 注入定义的常量。实际上就是字符串的一个替换而已。所以我们在注入的时候，必须注入的是字符串，而非值本身。例如&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight jav</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React 和 Redux 技术栈快速接入 TS 指南</title>
    <link href="https://690554125.github.io/2019/12/30/2019/ts-react/"/>
    <id>https://690554125.github.io/2019/12/30/2019/ts-react/</id>
    <published>2019-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:32:14.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>TS 的基本知识这里不做过多的介绍，请自己参照入门文档：<a href="https://ts.xcatliu.com/introduction/get-typescript">TS 入门文档</a>。</p></blockquote><p>推荐直接使用<em>create-react-app</em>直接生成支持 ts 的项目，然后进行 TS 代码测试，<code>create-react-app myProject --typescript</code>。或者直接使用 TS 官方提供的<a href="http://www.typescriptlang.org/play/?esModuleInterop=true&target=6&jsx=2#code/JYOwLgpgTgZghgYwgAgCoHsAm7kG8BQyRyYwYANhAFzIDOYUoA5gNyHGYS0KMAOp6EDXqMQrfAF98+MAE9eKOMgC8yAApwopOOQA8GbAD4gA">TS 在线测试</a>。</p><h2 id="常用-React-内建常用类型"><a href="#常用-React-内建常用类型" class="headerlink" title="常用 React 内建常用类型"></a>常用 React 内建常用类型</h2><blockquote><p>建议先浏览一遍有印象</p></blockquote><ul><li><p><code>React.FC&lt;Props&gt;</code>，定义函数组件用。</p></li><li><p><code>React.Component&lt;Props, State&gt;</code>，定义类组件用。</p></li><li><p><code>React.ReactNode</code>，用来定义各种 react 节点，比如<code>&lt;div /&gt;</code>, <code>&lt;MyComp /&gt;</code>, <code>this is a just a text</code>, <code>null</code>, <code>0</code>…</p></li><li><p><code>React.CSSProperties</code>，用来定义内联<code>style</code>的。</p></li><li><p><code>React.HTMLProps&lt;HTMLXXXELEMENT&gt;</code>，获取内建 html 元素的属性。</p></li><li></li><li><p><code>React.PropsWithChildren</code>，如果需要显示使用 children，使用该类型创建 props，如：<code>React.PropsWithChildren&lt;&#123;a: string&#125;&gt;</code>。</p></li><li><p><code>React.ReactEventHandler&lt;HTMLXXXELEMENT&gt;</code>，用来描述元素的事件处理函数。可以自行推导出适合的事件函数描述。</p></li><li><p><code>React.ChangeEventHandler&lt;HTMLXXXELEMENT&gt;</code>，最常见的如 input 的 change 事件函数描述，人为的判定类型。区别于上面的，这里的 event 可用 event.target.value，上面的是 event.currentTarget.value。类似还有<code>MouseEventHandler</code>, <code>MouseEventHandler</code>等。</p></li></ul><h2 id="常用的-TS-内建工具泛型和关键字"><a href="#常用的-TS-内建工具泛型和关键字" class="headerlink" title="常用的 TS 内建工具泛型和关键字"></a>常用的 TS 内建工具泛型和关键字</h2><blockquote><p>建议先浏览一遍有印象</p></blockquote><ul><li><p><code>typeof</code>关键字，自动推断出类型。如<code>typeof &#123;a: 1, b: &#39;hello&#39;&#125;</code> 得到 {a: number, b: string}。</p></li><li><p><code>keyof</code>关键字，类似于<code>Object.keys</code>。<code>keyof &#123;a: string, b: string&#125;</code>得到<code>&#39;a&#39; | &#39;b&#39;</code>。</p></li><li><p><code>in</code>关键字，类似于<code>let k in obj</code>，遍历。<code>type Keys = &#39;a&#39; | &#39;b&#39;, type Obj = &#123;[p in Keys]: any&#125;</code>，遍历了 Keys，p 相当于 k，得到的 Obj = {a: any, b: any}。</p></li><li><p><code>Partial&lt;T&gt;</code>，将 T 类型全部变为可选。如<code>Partial&lt;&#123;a: stirng, b: number&#125;&gt;</code> 得到 <code>&#123;a: string | undefined, b: number | undefined&#125;</code>。</p></li><li><p><code>Omit&lt;P, K&gt;</code>，从 P 中排除 K，返回排除后的结果。如<code>Omit&lt;&#123;a: string, b: number&#125;, &#39;a&#39;&gt;</code> 得到 <code>&#123;b: number&#125;</code>。</p></li><li><p><code>Pick&lt;T, K&gt;</code>，从 T 中挑选出 K。如<code>Pick&lt;&#123;a: 1, b: 2, c: 3&#125;, &#39;a&#39; | &#39;b&#39;</code> 得到<code>&#123;a: 1, b: 2&#125;</code>。（这里类型值写的是 number 类型的数字，TS 会推断出 number 类型）。</p></li><li><p><code>Exclude&lt;T, U&gt;</code>，从类型 T 中排除不在类型 U 中的。如<code>Exclude&lt;&#39;a&#39; | &#39;b&#39;, &#39;b&#39; | &#39;c&#39;&gt;</code> 得到 <code>&#39;a&#39;</code>，如<code>Exclude&lt;&#123;a: 1, b:2&#125;, &#123;a: 1, b:2, c: 3&#125;&gt;</code> 得到 <code>&#123;a: 1, b: 2&#125;</code>【这里可以这么理解：T 属于 U 的一种具体实现则返回 never，不是则返回 T】。自己实现<code>type Exc&lt;T, U&gt; = T extends U ? never: T</code>。</p></li><li><p><code>Extract&lt;T, U&gt;</code>，从类型 T 中提取出可以分配给类型 U 的部分。如<code>Extract&lt;&#39;a&#39; | &#39;b&#39;, &#39;b&#39; | &#39;c&#39;&gt;</code> 得到 <code>&#39;b&#39;</code>，如<code>Extract&lt;&#123;a: 1, b:2&#125;, &#123;a: 1, b:2, c: 3&#125;&gt;</code> 得到 <code>never</code>。【这里可以这么理解：T 属于 U 的一种具体实现，则返回 T，不是则返回 never】。自己实现<code>type Ext&lt;T, U&gt; = T extends U ? T : never</code>。</p></li></ul><h2 id="非-React-技术栈的常见的-TS-用法"><a href="#非-React-技术栈的常见的-TS-用法" class="headerlink" title="非 React 技术栈的常见的 TS 用法"></a>非 React 技术栈的常见的 TS 用法</h2><h3 id="类型预测"><a href="#类型预测" class="headerlink" title="类型预测"></a>类型预测</h3><p><code>is</code>关键字。常用场景，明确一个对象的类型后，会调用该对象的属性或方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.length; <span class="comment">// 如果 str 是 number类型，就会报错。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样写只能在编译阶段，当你传递的参数不是字符串类型而报错提示。</span></span><br><span class="line"><span class="comment">// 如果传入的参数是经过计算或者异步获取，无法保证时，运行时会很大概率报错。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do</span>(<span class="params">str: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do</span>(<span class="params">str: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 做好类型判断后编译和运行时都不会报错。但是每次都判断的话，代码变多有点麻烦。</span></span><br><span class="line">    <span class="keyword">return</span> str.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常会封装一个判断函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个判断函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do</span>(<span class="params">str: string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 调用判断函数</span></span><br><span class="line">  <span class="keyword">if</span> (isString(str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果do函数的入参无法确认类型。我们通常会用any。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do</span>(<span class="params">str: any</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里TS已经忽略了入参类型。</span></span><br><span class="line">  <span class="keyword">if</span> (isString(str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.length; <span class="comment">// 如果无length属性也不会在编译阶段报错，这跟我们使用TS的愿景不一致。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用类型预测 str is string。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">str: any</span>): <span class="title">str</span> <span class="title">is</span> <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do</span>(<span class="params">val: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isString(val)) &#123; <span class="comment">// 这里在运行时阶段也会判断是否是是string，再决定进入if内的执行代码。</span></span><br><span class="line">    <span class="keyword">return</span> str.length <span class="comment">// 这里在编译阶段（书写时）会获得string类型对象的所有属性和方法提示。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>str is string 能否改为: boolean，即 isString 返回的是一个布尔值？不能。改成单一的布尔类型后，无法获得期望的 string 类型对象的属性和方法推断。</p></blockquote><h2 id="React-常见写法"><a href="#React-常见写法" class="headerlink" title="React 常见写法"></a>React 常见写法</h2><h3 id="函数组件写法"><a href="#函数组件写法" class="headerlink" title="函数组件写法"></a>函数组件写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FcComp: React.FC&lt;&#123; <span class="attr">prop1</span>: string &#125;&gt; = <span class="function">(<span class="params">&#123; prop1 &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;prop1&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="类组件写法"><a href="#类组件写法" class="headerlink" title="类组件写法"></a>类组件写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line">interface IState &#123;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClsComp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IProps</span>, <span class="title">IState</span>&gt; </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认参数写法"><a href="#默认参数写法" class="headerlink" title="默认参数写法"></a>默认参数写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface IProps <span class="keyword">extends</span> IDefaultProps &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line">type IDefaultProps = <span class="keyword">typeof</span> DefComp.defaultProps; <span class="comment">// 获取到默认属性的type签名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefComp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IProps</span>, <span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">work</span>: <span class="string">&#x27;docter&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;this.props.name&#125; is &#123;this.props.work&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他写法参照项目中<em>defaultProps</em>文件夹</p></blockquote><h3 id="通用组件写法"><a href="#通用组件写法" class="headerlink" title="通用组件写法"></a>通用组件写法</h3><p>这里描述一个最常见的情景，一个列表组件。利用泛型（阅读入门 TS 泛型部分）实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件定义</span></span><br><span class="line">interface IProps&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">lists</span>: T[]</span><br><span class="line">  <span class="attr">renderItem</span>: <span class="function">(<span class="params">item: T</span>) =&gt;</span> React.ReactNode <span class="comment">// 最好都用ReactNode，而不是JSX.Element。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IProps</span>&lt;<span class="title">T</span>&gt;, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;lists, renderItem&#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;lists.map(renderItem)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用组件。注意：这里List传入了一个类型number，限制了泛型T的类型。</span></span><br><span class="line">&lt;List&lt;number&gt; lists=&#123;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125; renderItem=&#123;<span class="function"><span class="params">item</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>&#125;/&gt;</span><br></pre></td></tr></table></figure><h3 id="高阶组件（HOC）写法"><a href="#高阶组件（HOC）写法" class="headerlink" title="高阶组件（HOC）写法"></a>高阶组件（HOC）写法</h3><blockquote><p>React 的高阶组件即一个函数，接受一个组件，返回一个新的组件。</p></blockquote><p>这里写一个例子，一个 withState 函数，接收一个没有 count 状态的组件，包装后，返回一个带有 count 状态的组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* withState.tsx */</span></span><br><span class="line"><span class="keyword">export</span> interface InjectedProps &#123;</span><br><span class="line">  <span class="attr">count</span>: number,</span><br><span class="line">  <span class="attr">onIncrement</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withState = &lt;P extends InjectedProps&gt;(WrappedComp: React.ComponentType&lt;P&gt;) =&gt; &#123;</span><br><span class="line">  // 使用Omit结合keyof，实现排除掉IProp和InjectedProps交集的部分(count, onIncrement)</span><br><span class="line">  type HocProps = Omit&lt;IProp, keyof InjectedProps&gt; &amp; &#123;</span><br><span class="line">    // 这里可以做HOC的Props的扩展。</span><br><span class="line">    initialCount?: number</span><br><span class="line">  &#125;</span><br><span class="line">  type HocState = &#123; readonly count: number &#125;</span><br><span class="line"></span><br><span class="line">  return class Hoc extends React.Component&lt;HocProps, HocState&gt; &#123;</span><br><span class="line">    // 组件的名字，方便调试</span><br><span class="line">    static displayName = `withState($&#123;WrappedComp.name&#125;)`</span><br><span class="line"></span><br><span class="line">    state: HocState = &#123;</span><br><span class="line">      count: Number(this.props.initialCount) || 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleInc = () =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        count: this.state.count + 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      const &#123; ...restProps &#125; = this.props</span><br><span class="line">      const &#123; count &#125; = this.state</span><br><span class="line">      return (</span><br><span class="line">        &lt;WrappedComp</span><br><span class="line">          count=&#123;count&#125;</span><br><span class="line">          onIncrement=&#123;this.handleInc&#125;</span><br><span class="line">          // HOC组件，应该透传与HOC无关的Prop给被包裹的组件。这里的写法是因为TS本身的BUG，如果不断言，则类型报错。</span><br><span class="line">          &#123;...(restProps as IProp)&#125;</span><br><span class="line">        &gt;&lt;/WrappedComp&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* FcCounter.tsx */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FcCounter: React.FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; label, count, onIncrement &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> handleIncrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    onIncrement();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;label&#125;:&#123;count&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrement&#125;</span>&gt;</span>&#123;`Increment`&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 调用组件 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; FcCounter &#125; <span class="keyword">from</span> <span class="string">&#x27;./FcCounter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; withState &#125; <span class="keyword">from</span> <span class="string">&#x27;./withState&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HocCounterWithState = withState(FcCounter)</span><br><span class="line"></span><br><span class="line">&lt;HocCounterWithState initialCount=&#123;<span class="number">10</span>&#125; label=<span class="string">&quot;HocCounterWithState&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="默认-props-的写法"><a href="#默认-props-的写法" class="headerlink" title="默认 props 的写法"></a>默认 props 的写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类组件写法</span></span><br><span class="line">interface IProps <span class="keyword">extends</span> defaultProps &#123;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用typeof获取到类组件的默认参数类型</span></span><br><span class="line">type defaultProps = <span class="keyword">typeof</span> DefaultPropsComp.defaultProps;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultPropsComp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IProps</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  echoProps = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里也可以获得TS提示</span></span><br><span class="line">    <span class="keyword">const</span> &#123; age, name &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>this is how to set default props of class component<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组件写法</span></span><br><span class="line"><span class="keyword">const</span> defaultProps = &#123;</span><br><span class="line">  <span class="attr">work</span>: <span class="string">&#x27;doctor&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">interface IProps <span class="keyword">extends</span> defaultPropsType &#123;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line">type defaultPropsType = <span class="keyword">typeof</span> defaultProps;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DefaultPropsFC</span>(<span class="params">props: IProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里可以获得提示</span></span><br><span class="line">  <span class="keyword">const</span> &#123; work, age &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;`The $&#123;work&#125; is $&#123;age&#125;`&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：一定要挂载默认属性，否则调用组件的地方默认值也需要传入</span></span><br><span class="line">DefaultPropsFC.defaultProps = defaultProps;</span><br></pre></td></tr></table></figure><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>简单理解为可以 100%确定是什么类型，让 TS 按照确定的类型来进行 TS 提示，推断等。</p><p>JSX 中只支持用 <code>as</code> 断言写法。不支持**&lt;&gt;**写法，如<code>var a = &lt;string&gt;b</code>。跟 jsx 冲突，会当成标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">type UserA = &#123;</span><br><span class="line">  <span class="attr">name</span>: string,</span><br><span class="line">  <span class="attr">age</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type UserB = &#123;</span><br><span class="line">  <span class="attr">name</span>: string,</span><br><span class="line">  <span class="attr">sex</span>: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type IProps = &#123;</span><br><span class="line">  <span class="attr">user</span>: UserA | UserB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssertComp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IProps</span>, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里如果不做类型断言，会提示UserA上没有sex属性</span></span><br><span class="line">    <span class="comment">// const user = this.props.user</span></span><br><span class="line">    <span class="keyword">const</span> userB = <span class="built_in">this</span>.props.user <span class="keyword">as</span> UserB</span><br><span class="line">    <span class="keyword">const</span> userA = <span class="built_in">this</span>.props.user <span class="keyword">as</span> UserA</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is a user: &#123;userA.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is a user: &#123;userB.sex&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Context-写法"><a href="#Context-写法" class="headerlink" title="Context 写法"></a>Context 写法</h3><p>用 React 官方 DOC 里的更改按钮颜色主题做例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ctx.tsx */</span></span><br><span class="line"><span class="keyword">export</span> type Theme = React.CSSProperties</span><br><span class="line"></span><br><span class="line">type Themes = &#123;</span><br><span class="line">  <span class="attr">dark</span>: Theme</span><br><span class="line">  <span class="attr">light</span>: Theme</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> themes: Themes = &#123;</span><br><span class="line">  <span class="attr">dark</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;white&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">light</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;black&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里定义Context的签名</span></span><br><span class="line"><span class="keyword">export</span> type ThemeContextProps = &#123; <span class="attr">theme</span>: Theme; toggleTheme?: <span class="function">() =&gt;</span> <span class="keyword">void</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createContext&lt;T&gt;需要一个类型，把定义好的Context签名传递进去</span></span><br><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext&lt;ThemeContextProps&gt;(&#123;</span><br><span class="line">  <span class="attr">theme</span>: themes.light</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* themeButton.tsx */</span></span><br><span class="line"><span class="keyword">import</span> ThemeContext <span class="keyword">from</span> <span class="string">&#x27;./ctx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// contextType v16.6+支持</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ToggleThemeButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;</span>&#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = ThemeContext</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面需要通过this.context访问到上下文，所以定义一个类属性</span></span><br><span class="line">  <span class="comment">// 这里使用!明确告诉TS，该参数一定有。</span></span><br><span class="line">  <span class="comment">// 这里不能使用？，因为context是必选项</span></span><br><span class="line">  context!: React.ContextType&lt;<span class="keyword">typeof</span> ThemeContext&gt;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 前面context必须这么写，这里才能获取TS提示</span></span><br><span class="line">    <span class="keyword">const</span> &#123; theme, toggleTheme &#125; = <span class="built_in">this</span>.context</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;theme&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleTheme&#125;</span> &#123;<span class="attr">...this.props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        button</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* provider组件 */</span></span><br><span class="line"><span class="keyword">import</span> ThemeContext, &#123; Theme, themes &#125; <span class="keyword">from</span> <span class="string">&#x27;./ctx&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ThemeButton <span class="keyword">from</span> <span class="string">&#x27;./themeButton&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ThemeProvider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;</span>&#123;&#125;, State&gt; &#123;</span><br><span class="line">  <span class="attr">state</span>: State = &#123;</span><br><span class="line">    <span class="attr">theme</span>: themes.light,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  toggleTheme = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">theme</span>: state.theme === themes.light ? themes.dark : themes.light,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; theme &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> &#123; toggleTheme &#125; = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">theme</span>, <span class="attr">toggleTheme</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ThemeButton</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多类型参数（重载）"><a href="#多类型参数（重载）" class="headerlink" title="多类型参数（重载）"></a>多类型参数（重载）</h3><p>假设组件接收 2 种类型的 props。可以传<code>&#123;a: string, config?: number&#125;</code>，或者<code>&#123;b: string&#125;</code>。传递 config 时，说明是用的第一种类型 Props，也一定需要传递 a.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义types</span></span><br><span class="line">type CommonProps = &#123;</span><br><span class="line">  <span class="attr">children</span>: React.ReactNode</span><br><span class="line">  <span class="attr">as</span>: <span class="string">&#x27;p&#x27;</span> | <span class="string">&#x27;span&#x27;</span> | <span class="string">&#x27;h1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type NoTrucateProps = CommonProps &amp; &#123;</span><br><span class="line">  truncate?: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type TrucateProps = CommonProps &amp; &#123;</span><br><span class="line">  <span class="attr">truncate</span>: <span class="literal">true</span></span><br><span class="line">  expanded?: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类型判断，运行时可用，这里使用了is技巧。</span></span><br><span class="line"><span class="keyword">const</span> isTrucateProps = (</span><br><span class="line">  props: TrucateProps | NoTrucateProps</span><br><span class="line">): props is TrucateProps =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> !!props.truncate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是关键，函数重载，约定入参和反参。（并不是具体代码实现）调用组件的地方即可获取正确提示。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Text</span>(<span class="params">props: NoTrucateProps</span>): <span class="title">JSX</span>.<span class="title">Element</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">Text</span>(<span class="params">props: TrucateProps</span>): <span class="title">JSX</span>.<span class="title">Element</span></span></span></span><br><span class="line"><span class="function"><span class="function">// 这里才是<span class="title">Text</span>函数的真正实现。</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">Text</span>(<span class="params">props: NoTrucateProps | TrucateProps</span>) </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">console</span>.<span class="title">log</span>(<span class="params">props</span>)</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">if</span> (<span class="params">isTrucateProps(props)</span>) </span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">const</span> </span>&#123; children, <span class="attr">as</span>: Tag, truncate, expanded, ...others &#125; = props</span><br><span class="line">    <span class="keyword">const</span> classNames = truncate ? <span class="string">&#x27;.truncate&#x27;</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Tag</span> <span class="attr">className</span>=<span class="string">&#123;classNames&#125;</span> <span class="attr">aria-expanded</span>=<span class="string">&#123;!!expanded&#125;</span> &#123;<span class="attr">...others</span>&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;children&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Tag</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; children, <span class="attr">as</span>: Tag, ...others &#125; = props</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Tag</span> &#123;<span class="attr">...others</span>&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">Tag</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Text.defaultProps = &#123;</span><br><span class="line">  <span class="attr">as</span>: <span class="string">&#x27;p&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用地</span></span><br><span class="line"><span class="comment">// 这里传递了expanded，但未传入truncate，会获得提示。^_^</span></span><br><span class="line">&lt;OptionalProps expanded&gt;truncate-able but expanded&lt;/OptionalProps&gt;</span><br></pre></td></tr></table></figure><h3 id="零碎，但频率高的-React-用法"><a href="#零碎，但频率高的-React-用法" class="headerlink" title="零碎，但频率高的 React 用法"></a>零碎，但频率高的 React 用法</h3><p>包括：<strong>style 样式定义</strong>，<strong>接收 React 节点定义</strong>，<strong>事件函数定义</strong>，<strong>固定可选参数配置</strong>，<strong>类属性定义</strong>，<strong>Ref 定义</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* usefulReactProp.tsx */</span></span><br><span class="line">interface IProps <span class="keyword">extends</span> DefaultProps &#123;</span><br><span class="line">  <span class="attr">descText</span>: string <span class="comment">// 基本的类型</span></span><br><span class="line">  style?: React.CSSProperties <span class="comment">// 可以在调用组件的地方，获得style的完美提示。</span></span><br><span class="line">  additionDom?: React.ReactNode <span class="comment">// 接收任何类型的React节点</span></span><br><span class="line">  renderReactNode?: <span class="function">() =&gt;</span> React.ReactNode <span class="comment">// 接收一个以函数方式返回的React节点</span></span><br><span class="line">  <span class="attr">onChange</span>: React.FormEventHandler&lt;HTMLInputElement&gt; <span class="comment">// 优先推荐这种写法，让TS自己推断。下面的方法定义同样可以。</span></span><br><span class="line">  <span class="comment">// onChange: (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void</span></span><br><span class="line">  buttonSize: <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;middle&#x27;</span> | <span class="string">&#x27;big&#x27;</span> <span class="comment">// 可选参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type DefaultProps = <span class="keyword">typeof</span> UsefulReactProp.defaultProps</span><br><span class="line">interface IState &#123;</span><br><span class="line">  <span class="attr">value</span>: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">UsefulReactProp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IProps</span>, <span class="title">IState</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">initVal</span>: <span class="string">&#x27;输入内容&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个dom引用。使用如下定义方式</span></span><br><span class="line">  <span class="keyword">static</span> aDom = React.createRef&lt;HTMLDivElement&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个类属性，可以在需要时在赋值使用</span></span><br><span class="line">  <span class="keyword">static</span> classProp?: string</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个类属性，在定义时即复制</span></span><br><span class="line">  <span class="keyword">static</span> classProp2 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">this</span>.props.initVal</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  defaultOnChange = <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; onChange &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">value</span>: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.classProp = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    onChange(e)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; onChange, style, additionDom, renderReactNode &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="comment">// 如下代码提示只有3种上述定义过的值。</span></span><br><span class="line">    <span class="keyword">const</span> btnSize =</span><br><span class="line">      <span class="built_in">this</span>.props.buttonSize === <span class="string">&#x27;big&#x27;</span></span><br><span class="line">        ? <span class="string">&#x27;100px&#x27;</span></span><br><span class="line">        : <span class="built_in">this</span>.props.buttonSize === <span class="string">&#x27;small&#x27;</span></span><br><span class="line">        ? <span class="string">&#x27;60px&#x27;</span></span><br><span class="line">        : <span class="string">&#x27;80px;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.defaultOnChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;desc&quot;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          这是个带样式的提醒</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;additional&quot;</span>&gt;</span>&#123;additionDom&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;by-func-rcnode&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;renderReactNode ? renderReactNode() : null&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> <span class="attr">btnSize</span> &#125;&#125;&gt;</span>按钮尺寸：联合类型提示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 调用 */</span></span><br><span class="line"><span class="comment">// 如下都可以获取类型提示。</span></span><br><span class="line">&lt;UsefulReactProp</span><br><span class="line">  descText=<span class="string">&quot;一个简单的描述&quot;</span></span><br><span class="line">  onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.currentTarget.value);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  style=&#123;&#123; <span class="attr">fontSize</span>: <span class="number">14</span>, <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span> &#125;&#125;</span><br><span class="line">  additionDom=&#123;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>this is additional tag<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">  renderReactNode=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是通过函数返回的ReactNode<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  buttonSize=<span class="string">&quot;big&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;TS 的基本知识这里不做过多的介绍，请自己参照入门文档：&lt;a href=&quot;https://ts.xcatliu.com/introduction/get-typescript&quot;&gt;TS 入门文档&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React PureComponent 的浅比较</title>
    <link href="https://690554125.github.io/2019/12/30/2019/react-purecompent-diff/"/>
    <id>https://690554125.github.io/2019/12/30/2019/react-purecompent-diff/</id>
    <published>2019-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:31:45.034Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 <code>antd</code>  的 <code>form</code>  组件时，使用到了 <code>getFiledDecorator</code>  去包装了表单组件，其中一个表单组件是颜色选择器，颜色选择器这个表单组件是按  <code>antd</code>  自定义表单组件的方式，同时该组件也是用 <code>PureComponent</code>  声明的。</p><p>然后我在使用 <code>setFiledValue</code>  去修改另一个表单组件 A 的值时，发现，也会触发颜色选择器组件的 <code>render</code> 。原以为只会触发我修改的 A 的渲染才对。</p><p>测试发现，如果不使用 <code>getFiledDecorator</code>  的话，是不会给组件添加额外的 <code>props</code>  的，此时你去修改 A 组件的值，颜色选择器配合 <code>PureComponent</code>  声明的方式，接收到的新旧  <code>props</code>  都是 <code>&#123;&#125;</code> 。如果使用了 <code>getFieldDecorator</code>  进行包装的话，即便是 <code>PureComponent</code>  也会渲染组件，得到的新旧 <code>props</code>  如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241313/1578574171429-c0c467d6-fc64-44a8-83dc-1f3d09f77c49.png#align=left&display=inline&height=252&name=image.png&originHeight=504&originWidth=1182&size=95136&status=done&style=none&width=591" alt="image.png"></p><p>然后找了下 <code>PureComponent</code>  组件默认的浅比较方式，发现的确会出现以上描述的情况。</p><p>自带的浅比较函数如下，其中 <code>is</code>  函数是 <code>Object.is</code>  的实现，只不过处理了 2 个特殊的情况，即让 <code>+0 === -0</code> , 让 <code>NaN !== NaN</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ctor.prototype &amp;&amp; ctor.prototype.isPureReactComponent) &#123;</span><br><span class="line">  <span class="comment">// 先判断组件是否继承的PureComponent</span></span><br><span class="line">  <span class="keyword">return</span> !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowEqual</span>(<span class="params">objA: mixed, objB: mixed</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (is(objA, objB)) &#123;</span><br><span class="line">    <span class="comment">// 先用React实现的Object.is去比较2个参数，基本是同类型，同值，同引用的比较，如果不同，在往下比较。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果有一个参数的类型是对象，则肯定是不相等的（仔细理解第一个if的比较，同类型同值同引用，如果引用不同，肯定不等，那对象和JS的基本类型更不可能相等）</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> objA !== <span class="string">&#x27;object&#x27;</span> ||</span><br><span class="line">    objA === <span class="literal">null</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> objB !== <span class="string">&#x27;object&#x27;</span> ||</span><br><span class="line">    objB === <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 浅比较对象引用，获取2个参数的键名长度，不一致肯定不等。一致的话，在下面进行对象的第一层比较</span></span><br><span class="line">  <span class="keyword">const</span> keysA = <span class="built_in">Object</span>.keys(objA);</span><br><span class="line">  <span class="keyword">const</span> keysB = <span class="built_in">Object</span>.keys(objB);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (keysA.length !== keysB.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keysA.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="comment">// 比较A的键名是否存在于B对象中，用的是hasOwnProperty。</span></span><br><span class="line">      !hasOwnProperty.call(objB, keysA[i]) ||</span><br><span class="line">      <span class="comment">// 如果存在，看看A和B同键名的值是否引用相同（如果是对象），这里用is函数来搞定。</span></span><br><span class="line">      !is(objA[keysA[i]], objB[keysA[i]])</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 浅比较结束，这里返回trur, 认为两者相等。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在解释开篇提到的场景，两个 <code>&#123;&#125;</code>  的比较，比较到了最后一步，for 循环时，没有长度，里面没法走，直接到最后 <code>return true</code>  了。</p><p>然后包装后，Props 变多了，然后就进到了 for 循环里比较，发现深层的对象引用不一致。（这里有个疑惑，可能在第一步 is(A,B)就已经判断出来引用不同了，具体看 antd 的传参 Props 是怎么写的，是一个变量还是一个手写{}）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用 &lt;code&gt;antd&lt;/code&gt;  的 &lt;code&gt;form&lt;/code&gt;  组件时，使用到了 &lt;code&gt;getFiledDecorator&lt;/code&gt;  去包装了表单组件，其中一个表单组件是颜色选择器，颜色选择器这个表单组件是按  &lt;code&gt;antd&lt;/c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue中原生操作Select</title>
    <link href="https://690554125.github.io/2018/12/30/2018/about-select-element/"/>
    <id>https://690554125.github.io/2018/12/30/2018/about-select-element/</id>
    <published>2018-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:21:37.793Z</updated>
    
    <content type="html"><![CDATA[<p>Vue中鼓励数据驱动，从而避免跟以前一样使用jQuery来操作DOM的方式操作select。业务开发中经常碰到select操作，所以写一篇记录下原生操作select相关的。</p><h2 id="实际开发遇到的情况"><a href="#实际开发遇到的情况" class="headerlink" title="实际开发遇到的情况"></a>实际开发遇到的情况</h2><p>因为option选项展示给用户看是一个文案，而跟后端约定传值，是对应的code。如果根据selectData的值做一个判断，少的话还行，如果是城市选择，相信大家都有过经验，传递的是城市对应的code，这个时候，如果一个个判断，是不可能的。如下情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selectData&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;item,index in options&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;item.t&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.v&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">selectData</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: [</span><br><span class="line">      &#123;<span class="attr">t</span>: <span class="string">&#x27;one&#x27;</span>, <span class="attr">v</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">t</span>: <span class="string">&#x27;two&#x27;</span>, <span class="attr">v</span>: <span class="number">2</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">t</span>: <span class="string">&#x27;three&#x27;</span>, <span class="attr">v</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="获取对应value的思路"><a href="#获取对应value的思路" class="headerlink" title="获取对应value的思路"></a>获取对应value的思路</h2><p>依赖了原生操作dom的方式，先获取到select，然后获取其selectedIndex属性值，该值返回的就是select中选中的那个option的数组下标。</p><blockquote><p>这里有几个平时经常会弄错的地方。</p></blockquote><h3 id="关于v-model的绑定"><a href="#关于v-model的绑定" class="headerlink" title="关于v-model的绑定"></a>关于v-model的绑定</h3><p>应该绑定的是select，而不是循环结构里的option。</p><h3 id="关于-change事件的绑定"><a href="#关于-change事件的绑定" class="headerlink" title="关于@change事件的绑定"></a>关于@change事件的绑定</h3><p>也是需要绑定在select上，而不是option。</p><p>下面看下原生方式获取对应option的text</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selectData&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeEvent&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;selectDom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;item,index in options&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;item.t&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.v&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;options&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeEvent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> selectIndex = <span class="built_in">this</span>.$refs.selectDom.selectedIndex; <span class="comment">// 获取选中的index</span></span><br><span class="line">      <span class="keyword">let</span> selectOptionTxt = <span class="built_in">this</span>.$refs.options[selectedIndex].textContent;</span><br><span class="line">      <span class="built_in">console</span>.log(selectOptionTxt); <span class="comment">// 打印出对应的option的text</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一种方法可以获取，查看了下***$refs.options<em><strong>，实际上就是option的dom元素集合。每一个元素（option）有很多属性，其中有一个</strong></em>selected<em><strong>属性，选中的opiton，其</strong></em>selected<em><strong>属性值为true。所以我们可以遍历下option，查看其</strong></em>selected***属性，如果是true，则锁定该option。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示意代码</span></span><br><span class="line"><span class="keyword">let</span> selectOption = <span class="literal">null</span>;</span><br><span class="line">[].forEach.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;option&#x27;</span>), <span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item.selected) &#123;</span><br><span class="line">    selectOption = item; <span class="comment">// 确定了选择的option</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(selectOption.textContent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺提一下获取select最终选择的值。Vue中，通常是v-model绑定了data中的一个属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;select&#x27;</span>).value); </span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>因为本人经常碰到此类情况，每次又不能顺利的搞定该问题，不是绑错了v-model，就是其他问题，因此记录该文。<br>如果哪位有更好的方案（比如用Vue的方式），不吝赐教啊~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue中鼓励数据驱动，从而避免跟以前一样使用jQuery来操作DOM的方式操作select。业务开发中经常碰到select操作，所以写一篇记录下原生操作select相关的。&lt;/p&gt;
&lt;h2 id=&quot;实际开发遇到的情况&quot;&gt;&lt;a href=&quot;#实际开发遇到的情况&quot; class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>异步和同步</title>
    <link href="https://690554125.github.io/2018/12/30/2018/async-sync/"/>
    <id>https://690554125.github.io/2018/12/30/2018/async-sync/</id>
    <published>2018-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:21:43.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步函数"><a href="#同步函数" class="headerlink" title="同步函数"></a>同步函数</h2><blockquote><p>调用即可立即得到结果，不用等待</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是同步，立刻得到结果&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h2><blockquote><p>调用后不能立即得到结果，需要等待一段时间或者是下一轮<strong>tick</strong>(事件循环的一轮叫做一个tick)<br>这里需要注意的是：异步函数的代码通常有2个部分组成，<strong>现在运行的代码</strong>和<strong>将来运行的代码</strong>，异步函数并不是整体都是异步的。</p></blockquote><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.oDiv&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;别惊讶，点击事件也算异步&#x27;</span>); <span class="comment">// 将来运行的代码</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时器事件"><a href="#定时器事件" class="headerlink" title="定时器事件"></a>定时器事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;定时器，绝对的异步函数&#x27;</span>)  <span class="comment">// 将来运行的代码</span></span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ajax事件"><a href="#ajax事件" class="headerlink" title="ajax事件"></a>ajax事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假设引入了jQuery</span></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;ajax异步请求&#x27;</span>) <span class="comment">// 将来运行的代码</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;wrong&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6中新增的Promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFn4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="comment">// 将来运行的代码 start ↓</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将来运行的代码 end ↑</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步和异步函数也是事件循环中不可缺少的重要概念，对事件循环的运行机制有很大帮助。所以一定要清楚辨认哪些是异步，哪些是同步。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;同步函数&quot;&gt;&lt;a href=&quot;#同步函数&quot; class=&quot;headerlink&quot; title=&quot;同步函数&quot;&gt;&lt;/a&gt;同步函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;调用即可立即得到结果，不用等待&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>事件循环</title>
    <link href="https://690554125.github.io/2018/12/30/2018/event-loop/"/>
    <id>https://690554125.github.io/2018/12/30/2018/event-loop/</id>
    <published>2018-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:22:42.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么会有事件循环Event-Loop"><a href="#为什么会有事件循环Event-Loop" class="headerlink" title="为什么会有事件循环Event Loop?"></a>为什么会有事件循环Event Loop?</h2><p>因为JS是单线程的（执行JS代码的只有1个线程，通常会说主线程）。一个线程，执行过多任务或者任务过复杂，就会出现阻塞，因此有些如ajax耗时函数则交由其他线程处理，一旦有结果则会将为其事件条件满足设置的回调函数加入到任务队列中，EventLoop是一个机制，当当前执行栈清空后，则从任务队列中查询任务，拉出来执行，重复执行该过程。</p><h2 id="图形话EventLoop"><a href="#图形话EventLoop" class="headerlink" title="图形话EventLoop"></a>图形话EventLoop</h2><p>图片摘自掘金作者【奉献】的事件循环文章</p><p><img src="/images/eventloop.jpg" alt="eventloop"></p><p>图中有2个新的概念<strong>Macrotask</strong>和<strong>Microtask</strong></p><h2 id="Macrotask"><a href="#Macrotask" class="headerlink" title="Macrotask"></a>Macrotask</h2><p>通常所说的任务队列，也就是Task。在ES6提出Promise之前，应该只有Task这个队列，后来规范规定清楚了2种队列，Task就成了Macrotask，也叫宏任务队列。满足条件的事件，则进入该队列，如定时器函数（setTimeout, setInterval, setImmediate等），ajax回调函数，UI交互事件（click等）</p><h2 id="Microtask"><a href="#Microtask" class="headerlink" title="Microtask"></a>Microtask</h2><p>微任务队列，也叫Job，粒度比Task小。存放Promise.nextTick，Promise.then()之流的任务。</p><h2 id="两个队列的优先级和插入执行时机"><a href="#两个队列的优先级和插入执行时机" class="headerlink" title="两个队列的优先级和插入执行时机"></a>两个队列的优先级和插入执行时机</h2><p>微任务处理优先于宏任务处理。只有处理完清空了微任务队列，EventLoop才会从Macrotask取一个宏任务进行处理。微任务会插入到下个Tick之前执行</p><h2 id="事件循环的一轮怎么界定？"><a href="#事件循环的一轮怎么界定？" class="headerlink" title="事件循环的一轮怎么界定？"></a>事件循环的一轮怎么界定？</h2><p>这个问题困扰我比较久，查了很多资料，从【这波能反杀】作者写的事件循环机制中找到了明显的答案，结合参考了其他多篇事件循环不错的博文，如掘金的【王下邀月熊】和【奉献】2位作者的文章。</p><p><strong>事件循环</strong>的开始：JS全局代码（算宏任务）入栈。</p><p><strong>事件循环</strong>的结束：全局代码执行完，检查Micro是否有微任务，如果有，将微任务队列中函数放入执行栈依次执行完。清空微任务队列。至此第一轮事件循环结束。第二轮，即从下一个Macro任务开始，如此循环。<br>图片摘自掘金【王下邀月熊】的事件循环文章<br><img src="/images/micro_and_macro.jpg" alt="micro and macro"></p><h2 id="代码上理解"><a href="#代码上理解" class="headerlink" title="代码上理解"></a>代码上理解</h2><blockquote><p>纯文字解释不容易理解，结合代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beginEventFlag = <span class="string">&#x27;开始事件循环&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(beginEventFlag);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 异步</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;500s执行&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  resolve(<span class="number">5</span>);</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(r);</span><br><span class="line">  <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;又是5&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  p2.then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d)</span><br><span class="line">  &#125;)     </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;又是500s执行&#x27;</span>)     </span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Chrome中打印结果为：’开始时间循环’，5，又是5，500s执行，又是500s执行。</p><p>结合概念中来分析此段代码：</p><ol><li>全局代码（同步函数，宏任务）入栈，打印‘开始事件循环’。</li><li>遇到setTimeout（第一个），计时交由浏览器对应的定时器线程，并将其回调塞入宏任务队列中。</li><li>执行new Promise代码，立刻决议这个p。并将其p.then放入微任务队列中。</li><li>没有其他同步代码了，检查微任务队列，执行，打印‘5’。遇到p2，立刻决议，将p2.then塞入微任务队列。遇到setTimeout（第二个），塞入宏任务队列。</li><li>继续检查微任务队列，发现刚塞入微任务队列的p2.then，执行，打印‘又是5’。至此微任务队列清空完毕。</li><li>下一轮事件循环开始，宏任务队列中第一个setTimeout的回调执行，打印‘500s执行’。</li><li>检查微任务队列，没有Job需要执行。</li><li>再下一轮事件循环开始，宏任务队列中的第二个setTiemout的回调执行，打印‘又是500s执行’。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文参考了很多博文，简化不少东西，笔者主要是为了记录并方便自己的理解，如果有问题，欢迎指正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么会有事件循环Event-Loop&quot;&gt;&lt;a href=&quot;#为什么会有事件循环Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;为什么会有事件循环Event Loop?&quot;&gt;&lt;/a&gt;为什么会有事件循环Event Loop?&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>webpack中的less引入</title>
    <link href="https://690554125.github.io/2018/12/30/2018/less-module-in-webpack/"/>
    <id>https://690554125.github.io/2018/12/30/2018/less-module-in-webpack/</id>
    <published>2018-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:21:50.841Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目本身是用vue-cli搭建的模板。使用了less写样式。考虑到充分使用less的特性，所以肯定会有如mixin.less，base.less之类的公用less模块。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../common/style/base.less&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../common/style/mixin.less&#x27;</span>;</span><br></pre></td></tr></table></figure><p>当然可以这么写，完全的相对路径。经测试是没问题的。</p><p>但是既然是webpack，当然应该充分利用其特性。我也是在看了如慕课网的实战教程后，才了解过还有这种写法。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;~common/style/base.less&#x27;</span></span><br><span class="line">@import <span class="string">&#x27;~common/style/mixin.less&#x27;</span></span><br></pre></td></tr></table></figure><p>平时一直这么写，没有关注过~这个符号到底代表的是什么。直到有一次写到一个背景图片的less通用函数，出了问题，如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*mixin.less中声明的该less函数，路径是在src/common/style/mixin.less*/</span></span><br><span class="line"><span class="selector-class">.bg-set</span>(<span class="keyword">@img</span>) &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">@img</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在src/page/index/index.vue中使用该函数，图片存放在src/page/index/arrow.png*/</span></span><br><span class="line"><span class="selector-class">.bg-set</span>(&#x27;./arrow<span class="selector-class">.png</span>&#x27;)</span><br></pre></td></tr></table></figure><p>结果报错，webpack提示大致意思是找不到Module：arrow.png。看了下报错详细，引用的arrow.png路径尽然是<strong>src/common/style/arrow.png</strong>，而不是理想下的<strong>src/page/index/arrow.png</strong>。</p><p>这个问题的确不好描述，网上搜索过相关问题，基本没有。后来在慕课网中发现有人回答了该问题。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*mixin.less中函数改写为*/</span></span><br><span class="line"><span class="selector-class">.bg-set</span>(<span class="keyword">@img</span>) &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: ~<span class="string">&#x27;url(@&#123;img&#125;)&#x27;</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的关键其实就是多了个<del>，因此顺腾摸瓜，从webpack官网查找</del>相关的，在官方中文文档的LOADERS列表中，关于less-loader中有介绍，~利用了webpack的高级特性，将查询参数（这里应该就是传递的图片路径）传递给webpack resolver，告诉webpack<em><strong>以模块查找的方式对待该路径</strong></em>。有点懵逼，没关系，看下例子。</p><h2 id="先看下js模块的的导入规则"><a href="#先看下js模块的的导入规则" class="headerlink" title="先看下js模块的的导入规则"></a>先看下js模块的的导入规则</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引用Vue模块，优先会从Node核心模块查找，找不到的话，就从node_modules查找 --&gt;</span><br><span class="line"><span class="keyword">var</span> vue = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 如果传入的是一个相对路径，则按相对路径查找 --&gt;</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- webpack中可以配置alias（别名），假设@指代src/ --&gt;</span><br><span class="line"><span class="keyword">import</span> main <span class="keyword">from</span> <span class="string">&#x27;@/common/main&#x27;</span> <span class="comment">// 这里加载的路径就是src/common/main.js</span></span><br></pre></td></tr></table></figure><p>从上面大概能了解，webpack中，对js的引入，就是模块导入。webpack官方网站在less-loader和sass-loader中有这么一段相同话。</p><blockquote><p>只要加一个 ~ 前缀，告诉 webpack 去查询模块。</p></blockquote><p>因此，我们在css模块，或者html中只要在路径前面加一个~，实际上就是告诉webpack，按照模块加载方式来寻找对应的资源。<br>以下代码我们还是假设@是src的别名。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 因此问题迎刃而解 --&gt;</span><br><span class="line"><span class="comment">/*mixin.less中声明的该less函数，路径是在src/common/style/mixin.less*/</span></span><br><span class="line"><span class="selector-class">.bg-set</span>(<span class="keyword">@img</span>) &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">@img</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在src/page/index/index.vue中使用该函数，图片存放在src/page/index/arrow.png*/</span></span><br><span class="line"><span class="selector-class">.bg-set</span>(&#x27;~@/page/index/arrow.png&#x27;) // 可以 遇到~，模块方式加载，将@/page/index/arrow.png 解析为 src/page/index/arrow.png。</span><br><span class="line"></span><br><span class="line">.bg-set(<span class="string">&#x27;~./arrow.png&#x27;</span>) // 可以 遇到~，模块方式加载，将./arrow.png 按相对路径访问加载该模块资源，即在当前index文件夹中找到arrow.png。因此没问题。</span><br></pre></td></tr></table></figure><p>至于改动less函数的方法。原理差不多</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 对&#x27;url(@&#123;<span class="selector-tag">img</span>&#125;)&#x27;以模块方式搜索，因该函数被导入到当前less中，当传入./arrow<span class="selector-class">.png</span>时，以&#x27;~./arrow<span class="selector-class">.png</span>&#x27;的方式进行路径解析，跟上面第二种方式一致。 --&gt;</span><br><span class="line"><span class="attribute">background-image</span>: ~<span class="string">&#x27;url(@&#123;img&#125;)&#x27;</span>;</span><br></pre></td></tr></table></figure><p>至此，webpack中的~，大家应该都清楚不少。如果有不对的地方，欢迎指正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;项目本身是用vue-cli搭建的模板。使用了less写样式。考虑到充分使用less的特性，所以肯定会有如mixin.less，base.less之类的公用less模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简单的实现Promise</title>
    <link href="https://690554125.github.io/2018/12/30/2018/promise/"/>
    <id>https://690554125.github.io/2018/12/30/2018/promise/</id>
    <published>2018-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:22:01.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>promise 作为 es6 中的重点核心内容，除了只会用之外，还要弄明白其中的原理和规范。本文结合参阅的其他 Promise 实现的文章，还有 PromiseA+的规范，结合自己的理解，记录下如何实现 Promise。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;babel-polyfill&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单实用promise的例子。</span></span><br><span class="line"><span class="comment">// var promiseA = new Promise(function(resolve, reject) &#123;</span></span><br><span class="line"><span class="comment">//   setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     resolve(1)</span></span><br><span class="line"><span class="comment">//   &#125;, 2000)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// then方法可以无限调用，返回一个新的Promise，如果then中没有传递任何参数，则应该将上一个Promise的值传递到后面去</span></span><br><span class="line"><span class="comment">// promiseA.then().then().then().then(r =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(r)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// then方法接受另一个promise，则等待接收的promise决议，其链式调用的then是接收的promise的回调</span></span><br><span class="line"><span class="comment">// promiseA.then(function(r) &#123;</span></span><br><span class="line"><span class="comment">//   return new Promise(function(resolve, reject)&#123;</span></span><br><span class="line"><span class="comment">//     setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//       resolve(r + 1)</span></span><br><span class="line"><span class="comment">//     &#125;,2000)</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;).then(r =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(r)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> callbackFn = []</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> status = <span class="string">&#x27;pedding&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">fullfilledFn</span>) </span>&#123; <span class="comment">// 前一个promise的then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123; <span class="comment">// 后一个新返回的promise</span></span><br><span class="line">      handle(&#123;</span><br><span class="line">        <span class="attr">fullfilledFn</span>: fullfilledFn || <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">resolve</span>: resolve</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果未决议，塞入回调中</span></span><br><span class="line">    <span class="keyword">if</span> (status === <span class="string">&#x27;pedding&#x27;</span>) &#123;</span><br><span class="line">      callbackFn.push(callback)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据PromiseA+的规范，如果fullfilled不是一个函数，且promise1执行成功，Promise2必须成功执行并返回相同的值。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让Promise2成功执行，就是调用返回的新promise中的resolve方法，并传递相同的值，这里即result（在promise1的resolve阶段，已经执行了result = asyncReturnValue）</span></span><br><span class="line">    <span class="comment">// 如果已经决议，且then中未注册fullfilled函数，应该将值，带入返回的那个新promise的resovle中，继续传递下去</span></span><br><span class="line">    <span class="keyword">if</span> (!callback.fullfilledFn) &#123;</span><br><span class="line">      callback.resolve(result)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果已经决议，且then中有注册fullfilled函数，执行前一个promise.then中的fullfilled。</span></span><br><span class="line">    <span class="keyword">var</span> ret = callback.fullfilledFn(result)</span><br><span class="line">    <span class="comment">// 处理的结果，应该传递给新返回的promise的resolve中。</span></span><br><span class="line">    callback.resolve(ret)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">asyncReturnValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      result = asyncReturnValue</span><br><span class="line">      status = <span class="string">&#x27;fullfilled&#x27;</span></span><br><span class="line">      callbackFn.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item(asyncReturnValue)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  fn(resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.a = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.a</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value + <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;promise 作为 es6 中的重点核心内容，除了只会用之外，还要弄明白其中的原理和规范。本文结合参阅的其他 Promise 实现的文章，还有 PromiseA+的规范，结合自己的理解，记录下如何实现 Promise。&lt;/p&gt;
&lt;/blockqu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue的render函数</title>
    <link href="https://690554125.github.io/2018/12/30/2018/render-in-vue/"/>
    <id>https://690554125.github.io/2018/12/30/2018/render-in-vue/</id>
    <published>2018-12-29T16:00:00.000Z</published>
    <updated>2021-11-06T07:22:04.135Z</updated>
    
    <content type="html"><![CDATA[<p>工作和学习中大部分的vue工程都是通过vue-cli脚手架生成的，所以很少关注到vue实例创建那块，偶尔自己手写则会出现各种报错，比如该版本不包含编译器，请下载完整版本（带有编译器）的。因此趁着这个机会，详细了解了下vue的版本区别以及render函数的使用。</p><h2 id="先认识下Vue提供的版本"><a href="#先认识下Vue提供的版本" class="headerlink" title="先认识下Vue提供的版本"></a>先认识下Vue提供的版本</h2><h2 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h2><p>包含了编译器的Vue代码。</p><h2 id="关于runtime版本"><a href="#关于runtime版本" class="headerlink" title="关于runtime版本"></a>关于runtime版本</h2><p>创建Vue实例，渲染并处理虚拟DOM等的代码，不包含编译器</p><h2 id="编译器是什么"><a href="#编译器是什么" class="headerlink" title="编译器是什么"></a>编译器是什么</h2><p>负责将模板字符串变异成Js渲染函数的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Vue实例，传入一个模板作为HTML渲染结构。需要编译器，在客户端进行模板编译的。</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过render函数进行渲染，在构建时预编译为Js代码，最终生成的bundle中不在需要编译器。</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">this</span>.title)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出来，runtime版本和完整版本，最终都是编译为Js渲染函数代码。<strong>差异</strong>就是编译一个在开发人员代码构建时（打包器打包阶段），一个在客户端上调用时编译。</p><p>使用vue-cli构建的vue工程，可以看到vue实例的创建是这样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-nav</span>&gt;</span><span class="tag">&lt;/<span class="name">v-nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> vNav <span class="keyword">from</span> <span class="string">&#x27;v-nav.vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的h实际上是createElement函数</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(App)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em><strong>但是</strong></em>如果你尝试使用template来挂载模板，会报错。提示你需要完整版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vComp <span class="keyword">from</span> <span class="string">&#x27;./v-comp.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&lt;v-nav&gt;&lt;/v-nav&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    vComp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这是因为，采用webpack2+，或者parcel这类打包工具，都是引用的运行时版本<strong>node_modules\vue\dist\vue.runtime.esm.js</strong>。<br>如果你一定要使用template的话，可以配置一个别名，引用vue的完整版本即可。<br>如webpack:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于render渲染函数"><a href="#关于render渲染函数" class="headerlink" title="关于render渲染函数"></a>关于render渲染函数</h2><h2 id="某些环境中代码更简练"><a href="#某些环境中代码更简练" class="headerlink" title="某些环境中代码更简练"></a>某些环境中代码更简练</h2><blockquote><p>这里引用官方文档的一个例子</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个vue单文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 5&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">level</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个组件实际就是根据传递的level来决定使用的到底是h1到h5中的哪一个。虽然思路清晰，但是代码冗长。采用render函数的来重写的话。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;heading&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">createElement</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(createElement(</span><br><span class="line">      <span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level, <span class="comment">// h标签</span></span><br><span class="line">      <span class="built_in">this</span>.$slots.default <span class="comment">// 插槽内容</span></span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">return</span> createElement(</span><br><span class="line">      <span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level, <span class="comment">// h标签</span></span><br><span class="line">      <span class="built_in">this</span>.$slots.default <span class="comment">// 插槽内容</span></span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">level</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>的是，createElement函数返回的是一个<strong>虚拟DOM节点</strong>（这个组件只是整个页面的一小部分），即VNode。而<strong>虚拟DOM</strong>则是对Vue组件树建立起来的整个VNode树的称呼。上面代码中的console会打印出如下类似内容。<br><img src="/images/VNode_object.jpg" alt="VNode"></p><p><strong>注意</strong>：createElement的参数有三个。</p><ol><li>参数1必填，可以是String（HTML字符串）, Object（组件选项对象）, Function（解析上述类型任何一种的异步函数）。</li><li>参数2选填，Obejct，包含模板相关属性的数据对象，例如class, title等等。涉及的东西很多，查看官方文档<a href="https://cn.vuejs.org/v2/guide/render-function.html#%E6%B7%B1%E5%85%A5-data-%E5%AF%B9%E8%B1%A1">data对象</a></li><li>参数3选填，Array，String。子节点VNodes，<strong>由createElmenet()函数返回一个VNode对象</strong>，或者是字符串形式的文本节点。</li></ol><p>在上例的代码中，我们只传递的2个参数，第二个传入的参数就是createElement函数的第三个参数，一个数组，数组中是多个对象，都是由createElement()函数返回的VNode节点。类似如下<br><img src="/images/VNodes_createElement_return.jpg" alt="createElement返回的对象"></p><h2 id="VNodes-子节点-必须是唯一的"><a href="#VNodes-子节点-必须是唯一的" class="headerlink" title="VNodes(子节点)必须是唯一的"></a>VNodes(子节点)必须是唯一的</h2><p>这里的唯一是指，createElement返回的VNode对象是唯一的，使用上也是唯一的，应该看做一个实例对象。而不能当做引用对象使用。<br>官方示例中，如下代码，同一个对象被多次引用使用，就是错误的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> onlyOneObject = createElement(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>); <span class="comment">// 参数1，p标签。参数2，字符串，子节点</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    onlyOneObject, onlyOneObject <span class="comment">// 数组中引用同一个VNodes</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定需要重复渲染相同的元素/组件（即VNodes），采用工厂函数来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">20</span>&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// apply第二个参数接受数组或类数组生成一个20个长度的数组，map该数组，返回对应的一个应用map传递函数的20长度的数组内容。即[VNodes, VNodes, ..., VNodes]</span></span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>, hi)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Js代替模板引擎常用的功能实现"><a href="#Js代替模板引擎常用的功能实现" class="headerlink" title="Js代替模板引擎常用的功能实现"></a>Js代替模板引擎常用的功能实现</h2><h3 id="v-if和v-for"><a href="#v-if和v-for" class="headerlink" title="v-if和v-for"></a>v-if和v-for</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;items.length&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No items found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render函数中写法</span></span><br><span class="line">Vue.component(<span class="string">&#x27;forComp&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">createElement</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.items.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;ul&#x27;</span>, <span class="built_in">this</span>.items.map(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">&#x27;li&#x27;</span>, item.name)</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;No items found&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Array</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;enterVal&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render函数中写法</span></span><br><span class="line">Vue.component(<span class="string">&#x27;oInput&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">createElement</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;input&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">// DOM属性</span></span><br><span class="line">      <span class="attr">domProps</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: self.enterVal</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 事件监听器，基于on</span></span><br><span class="line">      <span class="attr">on</span>:&#123;</span><br><span class="line">        <span class="attr">input</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">          self.$emit(<span class="string">&#x27;input&#x27;</span>, event.target.value); <span class="comment">// 这里派发一个input事件，实际上对应应该是如下Html代码结构</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">enterVal</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 猜测，本质上v-model应该是vue的语法糖，实现监听input事件，然后得到最新输入的值，更新视图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通的插槽内容</span></span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">this</span>.$slots.default)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成带有作用域插槽的组件结构（可以传递数据的slot）</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;message&#x27;</span>],</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>&#123;=</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    <span class="comment">// $scopedSlots.default是一个函数，返回VNodes</span></span><br><span class="line">    <span class="built_in">this</span>.$scopedSlots.default(&#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="built_in">this</span>.message</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向子组件中传递作用域插槽。</span></span><br><span class="line"><span class="attr">rende</span>: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    createElement(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">scopedSlots</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> createElement(<span class="string">&#x27;span&#x27;</span>, props.text)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上面3段渲染函数关于插槽的写法，对应的template结构应该是 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    这里是slot的内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span>&#123;&#123;props.text&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要是方便自己理解render函数究竟是做什么的，区分不同vue构建版本中使用render方式的差异，后半部分结合官方文档，了解了下render函数的其他简单用法。文章内容还是比较浅，建议大家去官方文档学习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工作和学习中大部分的vue工程都是通过vue-cli脚手架生成的，所以很少关注到vue实例创建那块，偶尔自己手写则会出现各种报错，比如该版本不包含编译器，请下载完整版本（带有编译器）的。因此趁着这个机会，详细了解了下vue的版本区别以及render函数的使用。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
  </entry>
  
</feed>
